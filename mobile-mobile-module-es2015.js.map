{"version":3,"sources":["./node_modules/@angular/cdk/esm2015/text-field.js","./node_modules/@angular/material/esm2015/autocomplete.js","./node_modules/@angular/material/esm2015/form-field.js","./node_modules/@angular/material/esm2015/input.js","./src/app/mobile/adddashboardcomponent/adddashboardcomponent.component.html","./src/app/mobile/componentdetails/componentdetails.component.html","./src/app/mobile/components/addproduct/addproduct.component.html","./src/app/mobile/components/imageadd/imageadd.component.html","./src/app/mobile/components/productslider/productslider.component.html","./src/app/mobile/components/slideradds/slideradds.component.html","./src/app/mobile/dashboard/dashboard.component.html","./src/app/mobile/editscreen/editscreen.component.html","./src/app/mobile/layout/imagesingle/imagesingle.component.html","./src/app/mobile/layout/productwithtitle/productwithtitle.component.html","./src/app/mobile/layout/slider/slider.component.html","./src/app/mobile/layout/topproducts/topproducts.component.html","./src/app/mobile/adddashboardcomponent/adddashboardcomponent.component.scss","./src/app/mobile/adddashboardcomponent/adddashboardcomponent.component.ts","./src/app/mobile/componentdetails/componentdetails.component.scss","./src/app/mobile/componentdetails/componentdetails.component.ts","./src/app/mobile/components/addproduct/addproduct.component.scss","./src/app/mobile/components/addproduct/addproduct.component.ts","./src/app/mobile/components/imageadd/imageadd.component.scss","./src/app/mobile/components/imageadd/imageadd.component.ts","./src/app/mobile/components/productslider/productslider.component.scss","./src/app/mobile/components/productslider/productslider.component.ts","./src/app/mobile/components/slideradds/slideradds.component.scss","./src/app/mobile/components/slideradds/slideradds.component.ts","./src/app/mobile/dashboard/dashboard.component.scss","./src/app/mobile/dashboard/dashboard.component.ts","./src/app/mobile/editscreen/editscreen.component.scss","./src/app/mobile/editscreen/editscreen.component.ts","./src/app/mobile/layout/imagesingle/imagesingle.component.scss","./src/app/mobile/layout/imagesingle/imagesingle.component.ts","./src/app/mobile/layout/productwithtitle/productwithtitle.component.scss","./src/app/mobile/layout/productwithtitle/productwithtitle.component.ts","./src/app/mobile/layout/slider/slider.component.scss","./src/app/mobile/layout/slider/slider.component.ts","./src/app/mobile/layout/topproducts/topproducts.component.scss","./src/app/mobile/layout/topproducts/topproducts.component.ts","./src/app/mobile/mobile-routing.module.ts","./src/app/mobile/mobile.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACkG;AAC6C;AAClE;AAC5B;AACK;;AAEtD;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA,UAAU;AACV;AACA,wBAAwB,6FAA+B,EAAE,gBAAgB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,0CAAK;AACxB;AACA,mBAAmB,EAAE;AACrB,wBAAwB,2EAAa;AACrC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,2BAA2B,4CAAO;AAClC,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,qCAAqC,EAAE;AACvC,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,mCAAmC,qBAAqB,EAAE,yCAAyC;AACnG;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,mCAAmC,qBAAqB,EAAE,0CAA0C;AACpG;AACA,SAAS;AACT;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,wBAAwB,2EAAa;AACrC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU,UAAU,qBAAqB,IAAI;AACzD;AACA;AACA;AACA,KAAK,OAAO,8DAAQ,EAAE;AACtB,KAAK,OAAO,oDAAM;AAClB;AACA,qDAAqD,wEAAkB,EAAE,8CAA8C,4BAA4B,8DAAQ,CAAC,8DAAQ,GAAG,8DAAQ,CAAC,oDAAM,GAAG,EAAE,8CAA8C;AACzO;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,0DAAY;AAC3C;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK;AACL;AACA;AACA,mBAAmB,OAAO,oDAAM,EAAE;AAClC;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,EAAE;AAC9C;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,sBAAsB;AACzC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,sBAAsB;AACzC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,sBAAsB;AACzC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,gBAAgB,mFAAqB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,eAAe,sCAAsC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,eAAe,sCAAsC;AACrD;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,gBAAgB,sDAAS;AACzB,0BAA0B,gEAAS,MAAM,gEAAS;AAClD;AACA,4BAA4B;AAC5B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,EAAE;AACtB;AACA,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,qCAAqC,EAAE;AACvC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mCAAmC,OAAO;AAC1C;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,+BAA+B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa,IAAI;AACjB;AACA;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,8DAAQ,EAAE;AACtB,KAAK,OAAO,oDAAM;AAClB;AACA;AACA,eAAe,OAAO,mDAAK,iCAAiC;AAC5D,eAAe,OAAO,mDAAK,iCAAiC;AAC5D,eAAe,OAAO,mDAAK,kCAAkC;AAC7D;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA,0BAA0B,oEAAc;AACxC;AACA,aAAa,IAAI;AACjB;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAE8E;AAC9E;;;;;;;;;;;;;AC5fA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAC+D;AACD;AACgO;AACxD;AACnL;AAC8B;AACJ;AAClB;AACN;AACE;AACE;AACN;AACS;AACc;AACA;;AAE1E;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,kCAAkC,iFAAkB;AACpD;AACA;AACA,UAAU;AACV;AACA,6CAA6C,4DAAc;AAC3D;AACA;AACA,CAAC;AACD;AACA;AACA,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,0DAAY;AAC9C;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA,sCAAsC,+BAA+B;AACrE;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,kBAAkB,uCAAuC;AACzD;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iCAAiC,oCAAoC;AACrE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,sCAAsC,mFAAqB;AAC3D;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,aAAa,eAAe,EAAE,OAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,+BAA+B,4EAA0B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS,UAAU;AAC/B;AACA,kDAAkD,gBAAgB,gBAAgB,cAAc,iCAAiC,kBAAkB,eAAe,iBAAiB,kBAAkB,WAAW,8BAA8B,+BAA+B,iDAAiD,mBAAmB,gDAAgD,kBAAkB,sDAAsD,gBAAgB,2BAA2B,4BAA4B,gDAAgD,gBAAgB,kCAAkC,wBAAwB,mBAAmB;AAC7pB,+BAA+B,+DAAiB;AAChD,iCAAiC,qEAAuB;AACxD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,qBAAqB,UAAU,kFAA2B;AAC1D;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA,KAAK,OAAO,+DAAiB,EAAE;AAC/B,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,gCAAgC,OAAO,oDAAM,6CAA6C;AAC/F;AACA;AACA,gBAAgB,OAAO,uDAAS,SAAS,yDAAW,GAAG,eAAe,IAAI;AAC1E,aAAa,OAAO,uDAAS,mBAAmB,gBAAgB,IAAI;AACpE,eAAe,OAAO,6DAAe,SAAS,gEAAS,GAAG,oBAAoB,IAAI;AAClF,oBAAoB,OAAO,6DAAe,SAAS,kEAAW,IAAI;AAClE,mBAAmB,OAAO,mDAAK,EAAE;AACjC,6BAA6B,OAAO,mDAAK,EAAE;AAC3C,kBAAkB,OAAO,mDAAK,EAAE;AAChC,sBAAsB,OAAO,oDAAM,EAAE;AACrC,cAAc,OAAO,oDAAM,EAAE;AAC7B,cAAc,OAAO,oDAAM,EAAE;AAC7B,iBAAiB,OAAO,mDAAK,oBAAoB;AACjD;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,6CAA6C,4DAAc;AAC3D;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,WAAW,4DAAO;AAClB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,aAAa,iEAAiB;AAC9B,iBAAiB,gEAAU;AAC3B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,kDAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,6CAAO;AAC/C;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,EAAE,KAAK,mDAAK;AACxD,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,mDAAK;AAC5B,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4DAAI,KAAK,iEAAS;AACxC,wBAAwB;AACxB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gCAAgC,mCAAmC;AACnE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,qCAAqC,mFAAqB;AAC1D;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb,gBAAgB,gFAAkB;AAClC,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,4EAA4E,EAAE;AAC9E;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,4BAA4B,EAAE;AAC9B;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,mDAAK,kEAAkE,8DAAM;AAC5F,oBAAoB;AACpB;AACA;AACA,gDAAgD,8DAAM;AACtD,wBAAwB;AACxB;AACA;AACA,YAAY,gDAAE;AACd;AACA,QAAQ,2DAAG;AACX,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,kCAAkC,+EAAwB;AAC1D;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,mDAAK,aAAa,EAAE,KAAK,uDAAS,yCAAyC,EAAE,KAAK,uDAAS;AAC1G,kBAAkB,8DAAM;AACxB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,4CAA4C,EAAE;AAC9C;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,wBAAwB,4DAAM;AAC9B;AACA;AACA,6CAA6C,2DAAK;AAClD;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,2CAA2C,8DAAQ,gBAAgB,gEAAU;AAC7E,8CAA8C,yDAAG;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,iCAAiC,EAAE;AACnC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,2BAA2B,4FAA6B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,sCAAsC,uFAAwB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,oEAAoE,4DAAI;AACxE,mBAAmB,EAAE;AACrB,qEAAqE,2DAAG;AACxE,oBAAoB;AACpB;AACA;AACA;AACA;AACA,QAAQ,6DAAK;AACb;AACA,eAAe,mDAAK;AACpB;AACA;AACA;AACA,QAAQ,iEAAS;AACjB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,4BAA4B,EAAE;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ,4DAAI;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,+BAA+B,kEAAc;AAC7C;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,sCAAsC,4DAAM,uBAAuB,8DAAQ;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,+CAA+C,+BAA+B;AAC9E;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,mCAAmC,+BAA+B;AAClE;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,kEAAa;AAChC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,4DAAO,EAAE;AACrB,KAAK,OAAO,8DAAgB,EAAE;AAC9B,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,OAAO,+DAAiB,EAAE;AAC/B,KAAK,gCAAgC,OAAO,oDAAM,6CAA6C,GAAG;AAClG,KAAK,OAAO,gEAAc,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AAC9D,KAAK,OAAO,0EAAY,gBAAgB,OAAO,sDAAQ,EAAE,GAAG,OAAO,kDAAI,EAAE,GAAG;AAC5E,KAAK,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,SAAS,yDAAQ,IAAI,GAAG;AAC9F,KAAK,OAAO,oEAAa;AACzB;AACA;AACA,oBAAoB,OAAO,mDAAK,8BAA8B;AAC9D,gBAAgB,OAAO,mDAAK,sCAAsC;AAClE,mBAAmB,OAAO,mDAAK,yCAAyC;AACxE,6BAA6B,OAAO,mDAAK,2BAA2B;AACpE,4BAA4B,OAAO,mDAAK,sCAAsC;AAC9E;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,sEAAe,EAAE,kEAAa,EAAE,sEAAe,EAAE,6DAAY;AACvF;AACA;AACA,oBAAoB,sEAAe;AACnC;AACA;AACA,oBAAoB,sEAAe;AACnC;AACA;AACA;AACA,aAAa,IAAI;AACjB;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEuc;AACvc;;;;;;;;;;;;;ACxnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACqO;AACpJ;AAC9B;AACW;AACgB;AAC7B;AACW;AACX;AAC4B;AAC9B;AACU;;AAEzD;AACA;AACA,cAAc,uFAAuF;AACrG;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA,UAAU,OAAO,mDAAK,EAAE;AACxB;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,wBAAwB,mEAAO;AAC/B;AACA,QAAQ,iEAAK,UAAU,iEAAK,EAAE,0CAA0C;AACxE,QAAQ,sEAAU;AAClB,YAAY,iEAAK,EAAE,6CAA6C;AAChE,YAAY,mEAAO;AACnB;AACA;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,4DAA4D,MAAM;AAClE;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iBAAiB;AAC/C;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA,aAAa,OAAO,mDAAK,EAAE;AAC3B,UAAU,OAAO,mDAAK,EAAE;AACxB;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,aAAa,IAAI;AACjB;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,aAAa,IAAI;AACjB;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,aAAa,IAAI;AACjB;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,aAAa,IAAI;AACjB;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,+BAA+B,yEAAU;AACzC;AACA;AACA;AACA,UAAU;AACV;AACA,2CAA2C,4DAAc;AACzD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iBAAiB;AACzD;AACA,gDAAgD,iBAAiB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,sBAAsB,yBAAyB;AAC/C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,8BAA8B,iCAAiC;AAC/D;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mCAAmC,mFAAqB;AACxD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,0BAA0B,oCAAoC;AAC9D;AACA;AACA,gBAAgB;AAChB;AACA,qBAAqB,wBAAwB;AAC7C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,gFAAgF,oBAAoB;AACpG;AACA;AACA,kCAAkC,gEAAS,aAAa,EAAE;AAC1D,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,sBAAsB,gEAAS;AAC/B;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,sDAAsD,gEAAS;AAC/D,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,QAAQ,kDAAK;AACb,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,wCAAwC,gEAAS;AACjD,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,yCAAyC,gEAAS;AAClD,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,kCAAkC,gEAAS;AAC3C,wBAAwB;AACxB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sDAAS,kDAAkD,2DAAI;AAC/E,4BAA4B;AAC5B;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,m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AAmC,sBAAsB;AACzD;AACA,gBAAgB;AAChB;AACA,8BAA8B,qBAAqB;AACnD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mCAAmC,sBAAsB;AACzD;AACA,gBAAgB;AAChB;AACA,uBAAuB,qBAAqB;AAC5C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,4BAA4B,sBAAsB;AAClD;AACA,gBAAgB;AAChB;AACA,+BAA+B,qBAAqB;AACpD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oCAAoC,sBAAsB;AAC1D;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa,IAAI;AACjB;AACA;AACA,0BAA0B,OAAO,mDAAK,EAAE;AACxC,0BAA0B,OAAO,mDAAK,EAAE;AACxC,mBAAmB,OAAO,mDAAK,2BAA2B;AAC1D,2BAA2B,OAAO,mDAAK,EAAE;AACzC;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,gCAAgC,KAAK;AACrC;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,qCAAqC,4DAAc;;AAEnD;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,2BAA2B,8EAAe;AAC1C;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,eAAe;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,4CAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,aAAa,oFAAsB;AACnC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA,+BAA+B,EAAE;AACjC,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,4CAA4C,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,mFAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,cAAc,iBAAiB;AAC/B;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,+BAA+B;AAClD;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,uBAAuB;AAC3C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yBAAyB,kBAAkB,mFAAqB,QAAQ;AACxE;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,mBAAmB;AACnC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oFAAsB;AACzD,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,uCAAuC;AACxD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,uBAAuB;AAC3C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yBAAyB,kBAAkB,mFAAqB,QAAQ;AACxE;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oCAAoC,EAAE;AACtC;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,8CAA8C,EAAE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","file":"mobile-mobile-module-es2015.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform, normalizePassiveListenerOptions, PlatformModule } from '@angular/cdk/platform';\nimport { Directive, ElementRef, EventEmitter, Injectable, NgZone, Output, Input, NgModule, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { coerceElement, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Options to pass to the animationstart listener.\n * @type {?}\n */\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/\\@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    /**\n     * @param {?} _platform\n     * @param {?} _ngZone\n     */\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    /**\n     * @param {?} elementOrRef\n     * @return {?}\n     */\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        /** @type {?} */\n        const element = coerceElement(elementOrRef);\n        /** @type {?} */\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject.asObservable();\n        }\n        /** @type {?} */\n        const result = new Subject();\n        /** @type {?} */\n        const cssClass = 'cdk-text-field-autofilled';\n        /** @type {?} */\n        const listener = (/** @type {?} */ (((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => result.next({ target: (/** @type {?} */ (event.target)), isAutofilled: true })));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => result.next({ target: (/** @type {?} */ (event.target)), isAutofilled: false })));\n            }\n        }))));\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        }));\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: (/**\n             * @return {?}\n             */\n            () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            })\n        });\n        return result.asObservable();\n    }\n    /**\n     * @param {?} elementOrRef\n     * @return {?}\n     */\n    stopMonitoring(elementOrRef) {\n        /** @type {?} */\n        const element = coerceElement(elementOrRef);\n        /** @type {?} */\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._monitoredElements.forEach((/**\n         * @param {?} _info\n         * @param {?} element\n         * @return {?}\n         */\n        (_info, element) => this.stopMonitoring(element)));\n    }\n}\nAutofillMonitor.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nAutofillMonitor.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone }\n];\n/** @nocollapse */ AutofillMonitor.ngInjectableDef = ɵɵdefineInjectable({ factory: function AutofillMonitor_Factory() { return new AutofillMonitor(ɵɵinject(Platform), ɵɵinject(NgZone)); }, token: AutofillMonitor, providedIn: \"root\" });\n/**\n * A directive that can be used to monitor the autofill state of an input.\n */\nclass CdkAutofill {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _autofillMonitor\n     */\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /**\n         * Emits when the autofill state of the element changes.\n         */\n        this.cdkAutofill = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => this.cdkAutofill.emit(event)));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n}\nCdkAutofill.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkAutofill]',\n            },] },\n];\n/** @nocollapse */\nCdkAutofill.ctorParameters = () => [\n    { type: ElementRef },\n    { type: AutofillMonitor }\n];\nCdkAutofill.propDecorators = {\n    cdkAutofill: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nclass CdkTextareaAutosize {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _platform\n     * @param {?} _ngZone\n     */\n    constructor(_elementRef, _platform, _ngZone) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._textareaElement = (/** @type {?} */ (this._elementRef.nativeElement));\n    }\n    /**\n     * Minimum amount of rows in the textarea.\n     * @return {?}\n     */\n    get minRows() { return this._minRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minRows(value) {\n        this._minRows = value;\n        this._setMinHeight();\n    }\n    /**\n     * Maximum amount of rows in the textarea.\n     * @return {?}\n     */\n    get maxRows() { return this._maxRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxRows(value) {\n        this._maxRows = value;\n        this._setMaxHeight();\n    }\n    /**\n     * Whether autosizing is enabled or not\n     * @return {?}\n     */\n    get enabled() { return this._enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set enabled(value) {\n        value = coerceBooleanProperty(value);\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    /**\n     * Sets the minimum height of the textarea as determined by minRows.\n     * @return {?}\n     */\n    _setMinHeight() {\n        /** @type {?} */\n        const minHeight = this.minRows && this._cachedLineHeight ?\n            `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /**\n     * Sets the maximum height of the textarea as determined by maxRows.\n     * @return {?}\n     */\n    _setMaxHeight() {\n        /** @type {?} */\n        const maxHeight = this.maxRows && this._cachedLineHeight ?\n            `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                () => this.resizeToFitContent(true)));\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     * @private\n     * @return {?}\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        /** @type {?} */\n        let textareaClone = (/** @type {?} */ (this._textareaElement.cloneNode(false)));\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        (/** @type {?} */ (this._textareaElement.parentNode)).appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        (/** @type {?} */ (this._textareaElement.parentNode)).removeChild(textareaClone);\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param {?=} force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     * @return {?}\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        /** @type {?} */\n        const textarea = (/** @type {?} */ (this._elementRef.nativeElement));\n        /** @type {?} */\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        /** @type {?} */\n        const placeholderText = textarea.placeholder;\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n        // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n        // need to be removed temporarily.\n        textarea.classList.add('cdk-textarea-autosize-measuring');\n        textarea.placeholder = '';\n        // The cdk-textarea-autosize-measuring class includes a 2px padding to workaround an issue with\n        // Chrome, so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        /** @type {?} */\n        const height = textarea.scrollHeight - 4;\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        textarea.classList.remove('cdk-textarea-autosize-measuring');\n        textarea.placeholder = placeholderText;\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame((/**\n                 * @return {?}\n                 */\n                () => this._scrollToCaretPosition(textarea)));\n            }\n            else {\n                setTimeout((/**\n                 * @return {?}\n                 */\n                () => this._scrollToCaretPosition(textarea)));\n            }\n        }));\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     * @return {?}\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight === undefined) {\n            return;\n        }\n        this._textareaElement.style.height = this._initialHeight;\n    }\n    /**\n     * @return {?}\n     */\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     * @private\n     * @param {?} textarea\n     * @return {?}\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && document.activeElement === textarea) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n}\nCdkTextareaAutosize.decorators = [\n    { type: Directive, args: [{\n                selector: 'textarea[cdkTextareaAutosize]',\n                exportAs: 'cdkTextareaAutosize',\n                host: {\n                    'class': 'cdk-textarea-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1',\n                    '(input)': '_noopInputHandler()',\n                },\n            },] },\n];\n/** @nocollapse */\nCdkTextareaAutosize.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgZone }\n];\nCdkTextareaAutosize.propDecorators = {\n    minRows: [{ type: Input, args: ['cdkAutosizeMinRows',] }],\n    maxRows: [{ type: Input, args: ['cdkAutosizeMaxRows',] }],\n    enabled: [{ type: Input, args: ['cdkTextareaAutosize',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TextFieldModule {\n}\nTextFieldModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [CdkAutofill, CdkTextareaAutosize],\n                imports: [PlatformModule],\n                exports: [CdkAutofill, CdkTextareaAutosize],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n//# sourceMappingURL=text-field.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, Inject, InjectionToken, Input, Output, TemplateRef, ViewChild, ViewEncapsulation, Directive, forwardRef, Host, NgZone, Optional, ViewContainerRef, NgModule } from '@angular/core';\nimport { MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisableRipple, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionSelectionChange, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@angular/cdk/keycodes';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { _supportsShadowDom } from '@angular/cdk/platform';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField } from '@angular/material/form-field';\nimport { defer, fromEvent, merge, of, Subject, Subscription } from 'rxjs';\nimport { delay, filter, map, switchMap, take, tap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n * @type {?}\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected.\n */\nclass MatAutocompleteSelectedEvent {\n    /**\n     * @param {?} source\n     * @param {?} option\n     */\n    constructor(source, option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/**\n * \\@docs-private\n */\nclass MatAutocompleteBase {\n}\n/** @type {?} */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/**\n * Injection token to be used to override the default options for `mat-autocomplete`.\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\nclass MatAutocomplete extends _MatAutocompleteMixinBase {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} defaults\n     */\n    constructor(_changeDetectorRef, _elementRef, defaults) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        /**\n         * Whether the autocomplete panel should be visible, depending on option length.\n         */\n        this.showPanel = false;\n        this._isOpen = false;\n        /**\n         * Function that maps an option's control value to its display value in the trigger.\n         */\n        this.displayWith = null;\n        /**\n         * Event that is emitted whenever an option from the list is selected.\n         */\n        this.optionSelected = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is closed.\n         */\n        this.closed = new EventEmitter();\n        this._classList = {};\n        /**\n         * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n         */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /**\n     * Whether the autocomplete panel is open.\n     * @return {?}\n     */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     * @return {?}\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     * @param {?} value\n     * @return {?}\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = value.split(' ').reduce((/**\n             * @param {?} classList\n             * @param {?} className\n             * @return {?}\n             */\n            (classList, className) => {\n                classList[className.trim()] = true;\n                return classList;\n            }), (/** @type {?} */ ({})));\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     * @param {?} scrollTop\n     * @return {?}\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /**\n     * Returns the panel's scrollTop.\n     * @return {?}\n     */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /**\n     * Panel should hide itself when the option list is empty.\n     * @return {?}\n     */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Emits the `select` event.\n     * @param {?} option\n     * @return {?}\n     */\n    _emitSelectEvent(option) {\n        /** @type {?} */\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /**\n     * Sets the autocomplete visibility classes on a classlist based on the panel is visible.\n     * @private\n     * @param {?} classList\n     * @return {?}\n     */\n    _setVisibilityClasses(classList) {\n        classList['mat-autocomplete-visible'] = this.showPanel;\n        classList['mat-autocomplete-hidden'] = !this.showPanel;\n    }\n}\nMatAutocomplete.decorators = [\n    { type: Component, args: [{selector: 'mat-autocomplete',\n                template: \"<ng-template><div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel><ng-content></ng-content></div></ng-template>\",\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}@media (-ms-high-contrast:active){.mat-autocomplete-panel{outline:solid 1px}}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                },\n                providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ]\n            },] },\n];\n/** @nocollapse */\nMatAutocomplete.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\nMatAutocomplete.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    panel: [{ type: ViewChild, args: ['panel', { static: false },] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MatOptgroup,] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nMatAutocompleteOrigin.decorators = [\n    { type: Directive, args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin',\n            },] },\n];\n/** @nocollapse */\nMatAutocompleteOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The height of each autocomplete option.\n * @type {?}\n */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n * @type {?}\n */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatAutocompleteTrigger)),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nclass MatAutocompleteTrigger {\n    /**\n     * @param {?} _element\n     * @param {?} _overlay\n     * @param {?} _viewContainerRef\n     * @param {?} _zone\n     * @param {?} _changeDetectorRef\n     * @param {?} scrollStrategy\n     * @param {?} _dir\n     * @param {?} _formField\n     * @param {?} _document\n     * @param {?=} _viewportRuler\n     */\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /**\n         * Whether or not the label state is being overridden.\n         */\n        this._manuallyFloatingLabel = false;\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /**\n         * Stream of keyboard events that can close the panel.\n         */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = (/**\n         * @return {?}\n         */\n        () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        });\n        /**\n         * `View -> model callback called when value changes`\n         */\n        this._onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * `View -> model callback called when autocomplete has been touched`\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * \\@docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /**\n         * Stream of autocomplete option selections.\n         */\n        this.optionSelections = (/** @type {?} */ (defer((/**\n         * @return {?}\n         */\n        () => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map((/**\n                 * @param {?} option\n                 * @return {?}\n                 */\n                option => option.onSelectionChange)));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap((/**\n             * @return {?}\n             */\n            () => this.optionSelections)));\n        }))));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     * @return {?}\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                window.addEventListener('blur', this._windowBlurHandler);\n            }));\n            if (_supportsShadowDom()) {\n                /** @type {?} */\n                const element = this._element.nativeElement;\n                /** @type {?} */\n                const rootNode = element.getRootNode ? element.getRootNode() : null;\n                // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n                // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n                this._isInsideShadowRoot = rootNode instanceof ((/** @type {?} */ (window))).ShadowRoot;\n            }\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                (/** @type {?} */ (this._overlayRef)).updatePosition();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /**\n     * Whether or not the autocomplete panel is open.\n     * @return {?}\n     */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /**\n     * Opens the autocomplete suggestion panel.\n     * @return {?}\n     */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /**\n     * Closes the autocomplete suggestion panel.\n     * @return {?}\n     */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     * @return {?}\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            (/** @type {?} */ (this._overlayRef)).updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     * @return {?}\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter((/**\n         * @return {?}\n         */\n        () => this._overlayAttached))), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter((/**\n             * @return {?}\n             */\n            () => this._overlayAttached))) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event instanceof MatOptionSelectionChange ? event : null)));\n    }\n    /**\n     * The currently active option, coerced to MatOption type.\n     * @return {?}\n     */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /**\n     * Stream of clicks outside of the autocomplete panel.\n     * @private\n     * @return {?}\n     */\n    _getOutsideClickStream() {\n        return merge((/** @type {?} */ (fromEvent(this._document, 'click'))), (/** @type {?} */ (fromEvent(this._document, 'touchend'))))\n            .pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            /** @type {?} */\n            const clickTarget = (/** @type {?} */ ((this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                event.target)));\n            /** @type {?} */\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        })));\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        Promise.resolve(null).then((/**\n         * @return {?}\n         */\n        () => this._setTriggerValue(value)));\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            /** @type {?} */\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            /** @type {?} */\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption();\n            }\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleInput(event) {\n        /** @type {?} */\n        let target = (/** @type {?} */ (event.target));\n        /** @type {?} */\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @private\n     * @param {?=} shouldAnimate Whether the label should be animated when it is floated.\n     * @return {?}\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /**\n     * If the label has been manually elevated, return it to its normal state.\n     * @private\n     * @return {?}\n     */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     * @private\n     * @return {?}\n     */\n    _scrollToOption() {\n        /** @type {?} */\n        const index = this.autocomplete._keyManager.activeItemIndex || 0;\n        /** @type {?} */\n        const labelCount = _countGroupLabelsBeforeOption(index, this.autocomplete.options, this.autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.autocomplete._setScrollTop(0);\n        }\n        else {\n            /** @type {?} */\n            const newScrollPosition = _getOptionScrollPosition(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n            this.autocomplete._setScrollTop(newScrollPosition);\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     * @private\n     * @return {?}\n     */\n    _subscribeToClosingActions() {\n        /** @type {?} */\n        const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n        /** @type {?} */\n        const optionChanges = this.autocomplete.options.changes.pipe(tap((/**\n         * @return {?}\n         */\n        () => this._positionStrategy.reapplyLastPosition())), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                (/** @type {?} */ (this._overlayRef)).updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        })), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => this._setValueAndClose(event)));\n    }\n    /**\n     * Destroys the autocomplete suggestion panel.\n     * @private\n     * @return {?}\n     */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _setTriggerValue(value) {\n        /** @type {?} */\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        /** @type {?} */\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     * @private\n     * @param {?} skip\n     * @return {?}\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => {\n            if (option != skip && option.selected) {\n                option.deselect();\n            }\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _attachOverlay() {\n        if (!this.autocomplete) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        /** @type {?} */\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            }));\n            if (this._viewportRuler) {\n                this._viewportSubscription = this._viewportRuler.change().subscribe((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this._getPanelWidth() });\n                    }\n                }));\n            }\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        /** @type {?} */\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getOverlayPosition() {\n        /** @type {?} */\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /**\n     * Sets the positions on a position strategy based on the directive's input state.\n     * @private\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    _setStrategyPositions(positionStrategy) {\n        /** @type {?} */\n        const belowPosition = {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        };\n        /** @type {?} */\n        const abovePosition = {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom',\n            // The overlay edge connected to the trigger should have squared corners, while\n            // the opposite end has rounded corners. We apply a CSS class to swap the\n            // border-radius based on the overlay position.\n            panelClass: 'mat-autocomplete-panel-above'\n        };\n        /** @type {?} */\n        let positions;\n        if (this.position === 'above') {\n            positions = [abovePosition];\n        }\n        else if (this.position === 'below') {\n            positions = [belowPosition];\n        }\n        else {\n            positions = [belowPosition, abovePosition];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /**\n     * Returns the width of the input element, so the panel width can match it.\n     * @private\n     * @return {?}\n     */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     * @private\n     * @return {?}\n     */\n    _resetActiveItem() {\n        this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n    /**\n     * Determines whether the panel can be opened.\n     * @private\n     * @return {?}\n     */\n    _canOpen() {\n        /** @type {?} */\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\nMatAutocompleteTrigger.decorators = [\n    { type: Directive, args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            },] },\n];\n/** @nocollapse */\nMatAutocompleteTrigger.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler }\n];\nMatAutocompleteTrigger.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    position: [{ type: Input, args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n                exports: [\n                    MatAutocomplete,\n                    MatOptionModule,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    MatCommonModule\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MatAutocompleteSelectedEvent, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MatAutocomplete, MatAutocompleteModule, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, getMatAutocompleteMissingPanelError, AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocompleteTrigger, MatAutocompleteOrigin };\n//# sourceMappingURL=autocomplete.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, Input, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, Inject, InjectionToken, NgZone, Optional, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { MAT_LABEL_GLOBAL_OPTIONS, mixinColor } from '@angular/material/core';\nimport { fromEvent, merge, Subject } from 'rxjs';\nimport { startWith, take, takeUntil } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { CommonModule } from '@angular/common';\nimport { ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Single error message to be shown underneath the form field.\n */\nclass MatError {\n    constructor() {\n        this.id = `mat-error-${nextUniqueId++}`;\n    }\n}\nMatError.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-error',\n                host: {\n                    'class': 'mat-error',\n                    'role': 'alert',\n                    '[attr.id]': 'id',\n                }\n            },] },\n];\nMatError.propDecorators = {\n    id: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the MatFormField.\n * \\@docs-private\n * @type {?}\n */\nconst matFormFieldAnimations = {\n    /**\n     * Animation that transitions the form field's error and hint messages.\n     */\n    transitionMessages: trigger('transitionMessages', [\n        // TODO(mmalerba): Use angular animations for label animation as well.\n        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n        transition('void => enter', [\n            style({ opacity: 0, transform: 'translateY(-100%)' }),\n            animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * An interface which allows a control to work inside of a `MatFormField`.\n * @abstract\n * @template T\n */\nclass MatFormFieldControl {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getMatFormFieldPlaceholderConflictError() {\n    return Error('Placeholder attribute and child element were both specified.');\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\nfunction getMatFormFieldDuplicatedHintError(align) {\n    return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getMatFormFieldMissingControlError() {\n    return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextUniqueId$1 = 0;\n/**\n * Hint text to be shown underneath the form field control.\n */\nclass MatHint {\n    constructor() {\n        /**\n         * Whether to align the hint label at the start or end of the line.\n         */\n        this.align = 'start';\n        /**\n         * Unique ID for the hint. Used for the aria-describedby on the form field control.\n         */\n        this.id = `mat-hint-${nextUniqueId$1++}`;\n    }\n}\nMatHint.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-hint',\n                host: {\n                    'class': 'mat-hint',\n                    '[class.mat-right]': 'align == \"end\"',\n                    '[attr.id]': 'id',\n                    // Remove align attribute to prevent it from interfering with layout.\n                    '[attr.align]': 'null',\n                }\n            },] },\n];\nMatHint.propDecorators = {\n    align: [{ type: Input }],\n    id: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The floating label for a `mat-form-field`.\n */\nclass MatLabel {\n}\nMatLabel.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-label'\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * \\@breaking-change 8.0.0\n */\nclass MatPlaceholder {\n}\nMatPlaceholder.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-placeholder'\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Prefix to be placed in front of the form field.\n */\nclass MatPrefix {\n}\nMatPrefix.decorators = [\n    { type: Directive, args: [{\n                selector: '[matPrefix]',\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Suffix to be placed at the end of the form field.\n */\nclass MatSuffix {\n}\nMatSuffix.decorators = [\n    { type: Directive, args: [{\n                selector: '[matSuffix]',\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextUniqueId$2 = 0;\n/** @type {?} */\nconst floatingLabelScale = 0.75;\n/** @type {?} */\nconst outlineGapPadding = 5;\n/**\n * Boilerplate for applying mixins to MatFormField.\n * \\@docs-private\n */\nclass MatFormFieldBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/**\n * Base class to which we're applying the form field mixins.\n * \\@docs-private\n * @type {?}\n */\nconst _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n * @type {?}\n */\nconst MAT_FORM_FIELD_DEFAULT_OPTIONS = new InjectionToken('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n/**\n * Container for form controls that applies Material Design styling and behavior.\n */\nclass MatFormField extends _MatFormFieldMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} labelOptions\n     * @param {?} _dir\n     * @param {?} _defaults\n     * @param {?} _platform\n     * @param {?} _ngZone\n     * @param {?} _animationMode\n     */\n    constructor(_elementRef, _changeDetectorRef, labelOptions, _dir, _defaults, _platform, _ngZone, _animationMode) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._defaults = _defaults;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        /**\n         * Whether the outline gap needs to be calculated\n         * immediately on the next change detection run.\n         */\n        this._outlineGapCalculationNeededImmediately = false;\n        /**\n         * Whether the outline gap needs to be calculated next time the zone has stabilized.\n         */\n        this._outlineGapCalculationNeededOnStable = false;\n        this._destroyed = new Subject();\n        /**\n         * Override for the logic that disables the label animation in certain cases.\n         */\n        this._showAlwaysAnimate = false;\n        /**\n         * State of the mat-hint and mat-error animations.\n         */\n        this._subscriptAnimationState = '';\n        this._hintLabel = '';\n        // Unique id for the hint label.\n        this._hintLabelId = `mat-hint-${nextUniqueId$2++}`;\n        // Unique id for the internal form field label.\n        this._labelId = `mat-form-field-label-${nextUniqueId$2++}`;\n        /* Holds the previous direction emitted by directionality service change emitter.\n             This is used in updateOutlineGap() method to update the width and position of the gap in the\n             outline. Only relevant for the outline appearance. The direction is getting updated in the\n             UI after directionality service change emission. So the outlines gaps are getting\n             updated in updateOutlineGap() method before connectionContainer child direction change\n             in UI. We may get wrong calculations. So we are storing the previous direction to get the\n             correct outline calculations*/\n        this._previousDirection = 'ltr';\n        this._labelOptions = labelOptions ? labelOptions : {};\n        this.floatLabel = this._labelOptions.float || 'auto';\n        this._animationsEnabled = _animationMode !== 'NoopAnimations';\n        // Set the default through here so we invoke the setter on the first run.\n        this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n        this._hideRequiredMarker = (_defaults && _defaults.hideRequiredMarker != null) ?\n            _defaults.hideRequiredMarker : false;\n    }\n    /**\n     * The form-field appearance style.\n     * @return {?}\n     */\n    get appearance() { return this._appearance; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set appearance(value) {\n        /** @type {?} */\n        const oldValue = this._appearance;\n        this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n        if (this._appearance === 'outline' && oldValue !== value) {\n            this._outlineGapCalculationNeededOnStable = true;\n        }\n    }\n    /**\n     * Whether the required marker should be hidden.\n     * @return {?}\n     */\n    get hideRequiredMarker() { return this._hideRequiredMarker; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hideRequiredMarker(value) {\n        this._hideRequiredMarker = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the floating label should always float or not.\n     * @return {?}\n     */\n    get _shouldAlwaysFloat() {\n        return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n    }\n    /**\n     * Whether the label can float or not.\n     * @return {?}\n     */\n    get _canLabelFloat() { return this.floatLabel !== 'never'; }\n    /**\n     * Text for the form field hint.\n     * @return {?}\n     */\n    get hintLabel() { return this._hintLabel; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hintLabel(value) {\n        this._hintLabel = value;\n        this._processHints();\n    }\n    /**\n     * Whether the label should always float, never float or float as the user types.\n     *\n     * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n     * way to make the floating label emulate the behavior of a standard input placeholder. However\n     * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n     * appearances the `never` option has been disabled in favor of just using the placeholder.\n     * @return {?}\n     */\n    get floatLabel() {\n        return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set floatLabel(value) {\n        if (value !== this._floatLabel) {\n            this._floatLabel = value || this._labelOptions.float || 'auto';\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get _control() {\n        // TODO(crisbeto): we need this hacky workaround in order to support both Ivy\n        // and ViewEngine. We should clean this up once Ivy is the default renderer.\n        return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set _control(value) {\n        this._explicitFormFieldControl = value;\n    }\n    /**\n     * @return {?}\n     */\n    get _labelChild() {\n        return this._labelChildNonStatic || this._labelChildStatic;\n    }\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     * @return {?}\n     */\n    getConnectedOverlayOrigin() {\n        return this._connectionContainerRef || this._elementRef;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._validateControlChild();\n        /** @type {?} */\n        const control = this._control;\n        if (control.controlType) {\n            this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n        }\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        control.stateChanges.pipe(startWith((/** @type {?} */ (null)))).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._validatePlaceholders();\n            this._syncDescribedByIds();\n            this._changeDetectorRef.markForCheck();\n        }));\n        // Run change detection if the value changes.\n        if (control.ngControl && control.ngControl.valueChanges) {\n            control.ngControl.valueChanges\n                .pipe(takeUntil(this._destroyed))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => this._changeDetectorRef.markForCheck()));\n        }\n        // Note that we have to run outside of the `NgZone` explicitly,\n        // in order to avoid throwing users into an infinite loop\n        // if `zone-patch-rxjs` is included.\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                if (this._outlineGapCalculationNeededOnStable) {\n                    this.updateOutlineGap();\n                }\n            }));\n        }));\n        // Run change detection and update the outline if the suffix or prefix changes.\n        merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._outlineGapCalculationNeededOnStable = true;\n            this._changeDetectorRef.markForCheck();\n        }));\n        // Re-validate when the number of hints changes.\n        this._hintChildren.changes.pipe(startWith(null)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._processHints();\n            this._changeDetectorRef.markForCheck();\n        }));\n        // Update the aria-described by when the number of errors changes.\n        this._errorChildren.changes.pipe(startWith(null)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._syncDescribedByIds();\n            this._changeDetectorRef.markForCheck();\n        }));\n        if (this._dir) {\n            this._dir.change.pipe(takeUntil(this._destroyed)).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this.updateOutlineGap();\n                this._previousDirection = this._dir.value;\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        this._validateControlChild();\n        if (this._outlineGapCalculationNeededImmediately) {\n            this.updateOutlineGap();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._subscriptAnimationState = 'enter';\n        this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Determines whether a class from the NgControl should be forwarded to the host element.\n     * @param {?} prop\n     * @return {?}\n     */\n    _shouldForward(prop) {\n        /** @type {?} */\n        const ngControl = this._control ? this._control.ngControl : null;\n        return ngControl && ngControl[prop];\n    }\n    /**\n     * @return {?}\n     */\n    _hasPlaceholder() {\n        return !!(this._control && this._control.placeholder || this._placeholderChild);\n    }\n    /**\n     * @return {?}\n     */\n    _hasLabel() {\n        return !!this._labelChild;\n    }\n    /**\n     * @return {?}\n     */\n    _shouldLabelFloat() {\n        return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n    }\n    /**\n     * @return {?}\n     */\n    _hideControlPlaceholder() {\n        // In the legacy appearance the placeholder is promoted to a label if no label is given.\n        return this.appearance === 'legacy' && !this._hasLabel() ||\n            this._hasLabel() && !this._shouldLabelFloat();\n    }\n    /**\n     * @return {?}\n     */\n    _hasFloatingLabel() {\n        // In the legacy appearance the placeholder is promoted to a label if no label is given.\n        return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n    }\n    /**\n     * Determines whether to display hints or errors.\n     * @return {?}\n     */\n    _getDisplayedMessages() {\n        return (this._errorChildren && this._errorChildren.length > 0 &&\n            this._control.errorState) ? 'error' : 'hint';\n    }\n    /**\n     * Animates the placeholder up and locks it in position.\n     * @return {?}\n     */\n    _animateAndLockLabel() {\n        if (this._hasFloatingLabel() && this._canLabelFloat) {\n            // If animations are disabled, we shouldn't go in here,\n            // because the `transitionend` will never fire.\n            if (this._animationsEnabled) {\n                this._showAlwaysAnimate = true;\n                fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._showAlwaysAnimate = false;\n                }));\n            }\n            this.floatLabel = 'always';\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n     * or child element with the `mat-placeholder` directive).\n     * @private\n     * @return {?}\n     */\n    _validatePlaceholders() {\n        if (this._control.placeholder && this._placeholderChild) {\n            throw getMatFormFieldPlaceholderConflictError();\n        }\n    }\n    /**\n     * Does any extra processing that is required when handling the hints.\n     * @private\n     * @return {?}\n     */\n    _processHints() {\n        this._validateHints();\n        this._syncDescribedByIds();\n    }\n    /**\n     * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n     * attribute being considered as `align=\"start\"`.\n     * @private\n     * @return {?}\n     */\n    _validateHints() {\n        if (this._hintChildren) {\n            /** @type {?} */\n            let startHint;\n            /** @type {?} */\n            let endHint;\n            this._hintChildren.forEach((/**\n             * @param {?} hint\n             * @return {?}\n             */\n            (hint) => {\n                if (hint.align === 'start') {\n                    if (startHint || this.hintLabel) {\n                        throw getMatFormFieldDuplicatedHintError('start');\n                    }\n                    startHint = hint;\n                }\n                else if (hint.align === 'end') {\n                    if (endHint) {\n                        throw getMatFormFieldDuplicatedHintError('end');\n                    }\n                    endHint = hint;\n                }\n            }));\n        }\n    }\n    /**\n     * Sets the list of element IDs that describe the child control. This allows the control to update\n     * its `aria-describedby` attribute accordingly.\n     * @private\n     * @return {?}\n     */\n    _syncDescribedByIds() {\n        if (this._control) {\n            /** @type {?} */\n            let ids = [];\n            if (this._getDisplayedMessages() === 'hint') {\n                /** @type {?} */\n                const startHint = this._hintChildren ?\n                    this._hintChildren.find((/**\n                     * @param {?} hint\n                     * @return {?}\n                     */\n                    hint => hint.align === 'start')) : null;\n                /** @type {?} */\n                const endHint = this._hintChildren ?\n                    this._hintChildren.find((/**\n                     * @param {?} hint\n                     * @return {?}\n                     */\n                    hint => hint.align === 'end')) : null;\n                if (startHint) {\n                    ids.push(startHint.id);\n                }\n                else if (this._hintLabel) {\n                    ids.push(this._hintLabelId);\n                }\n                if (endHint) {\n                    ids.push(endHint.id);\n                }\n            }\n            else if (this._errorChildren) {\n                ids = this._errorChildren.map((/**\n                 * @param {?} error\n                 * @return {?}\n                 */\n                error => error.id));\n            }\n            this._control.setDescribedByIds(ids);\n        }\n    }\n    /**\n     * Throws an error if the form field's control is missing.\n     * @protected\n     * @return {?}\n     */\n    _validateControlChild() {\n        if (!this._control) {\n            throw getMatFormFieldMissingControlError();\n        }\n    }\n    /**\n     * Updates the width and position of the gap in the outline. Only relevant for the outline\n     * appearance.\n     * @return {?}\n     */\n    updateOutlineGap() {\n        /** @type {?} */\n        const labelEl = this._label ? this._label.nativeElement : null;\n        if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n            !labelEl.textContent.trim()) {\n            return;\n        }\n        if (!this._platform.isBrowser) {\n            // getBoundingClientRect isn't available on the server.\n            return;\n        }\n        // If the element is not present in the DOM, the outline gap will need to be calculated\n        // the next time it is checked and in the DOM.\n        if (!(/** @type {?} */ (document.documentElement)).contains(this._elementRef.nativeElement)) {\n            this._outlineGapCalculationNeededImmediately = true;\n            return;\n        }\n        /** @type {?} */\n        let startWidth = 0;\n        /** @type {?} */\n        let gapWidth = 0;\n        /** @type {?} */\n        const container = this._connectionContainerRef.nativeElement;\n        /** @type {?} */\n        const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n        /** @type {?} */\n        const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n        if (this._label && this._label.nativeElement.children.length) {\n            /** @type {?} */\n            const containerRect = container.getBoundingClientRect();\n            // If the container's width and height are zero, it means that the element is\n            // invisible and we can't calculate the outline gap. Mark the element as needing\n            // to be checked the next time the zone stabilizes. We can't do this immediately\n            // on the next change detection, because even if the element becomes visible,\n            // the `ClientRect` won't be reclaculated immediately. We reset the\n            // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n            if (containerRect.width === 0 && containerRect.height === 0) {\n                this._outlineGapCalculationNeededOnStable = true;\n                this._outlineGapCalculationNeededImmediately = false;\n                return;\n            }\n            /** @type {?} */\n            const containerStart = this._getStartEnd(containerRect);\n            /** @type {?} */\n            const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n            /** @type {?} */\n            let labelWidth = 0;\n            for (const child of labelEl.children) {\n                labelWidth += child.offsetWidth;\n            }\n            startWidth = labelStart - containerStart - outlineGapPadding;\n            gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n        }\n        for (let i = 0; i < startEls.length; i++) {\n            startEls.item(i).style.width = `${startWidth}px`;\n        }\n        for (let i = 0; i < gapEls.length; i++) {\n            gapEls.item(i).style.width = `${gapWidth}px`;\n        }\n        this._outlineGapCalculationNeededOnStable =\n            this._outlineGapCalculationNeededImmediately = false;\n    }\n    /**\n     * Gets the start end of the rect considering the current directionality.\n     * @private\n     * @param {?} rect\n     * @return {?}\n     */\n    _getStartEnd(rect) {\n        return this._previousDirection === 'rtl' ? rect.right : rect.left;\n    }\n}\nMatFormField.decorators = [\n    { type: Component, args: [{selector: 'mat-form-field',\n                exportAs: 'matFormField',\n                template: \"<div class=\\\"mat-form-field-wrapper\\\"><div class=\\\"mat-form-field-flex\\\" #connectionContainer (click)=\\\"_control.onContainerClick && _control.onContainerClick($event)\\\"><ng-container *ngIf=\\\"appearance == 'outline'\\\"><div class=\\\"mat-form-field-outline\\\"><div class=\\\"mat-form-field-outline-start\\\"></div><div class=\\\"mat-form-field-outline-gap\\\"></div><div class=\\\"mat-form-field-outline-end\\\"></div></div><div class=\\\"mat-form-field-outline mat-form-field-outline-thick\\\"><div class=\\\"mat-form-field-outline-start\\\"></div><div class=\\\"mat-form-field-outline-gap\\\"></div><div class=\\\"mat-form-field-outline-end\\\"></div></div></ng-container><div class=\\\"mat-form-field-prefix\\\" *ngIf=\\\"_prefixChildren.length\\\"><ng-content select=\\\"[matPrefix]\\\"></ng-content></div><div class=\\\"mat-form-field-infix\\\" #inputContainer><ng-content></ng-content><span class=\\\"mat-form-field-label-wrapper\\\"><label class=\\\"mat-form-field-label\\\" (cdkObserveContent)=\\\"updateOutlineGap()\\\" [cdkObserveContentDisabled]=\\\"appearance != 'outline'\\\" [id]=\\\"_labelId\\\" [attr.for]=\\\"_control.id\\\" [attr.aria-owns]=\\\"_control.id\\\" [class.mat-empty]=\\\"_control.empty && !_shouldAlwaysFloat\\\" [class.mat-form-field-empty]=\\\"_control.empty && !_shouldAlwaysFloat\\\" [class.mat-accent]=\\\"color == 'accent'\\\" [class.mat-warn]=\\\"color == 'warn'\\\" #label *ngIf=\\\"_hasFloatingLabel()\\\" [ngSwitch]=\\\"_hasLabel()\\\"><ng-container *ngSwitchCase=\\\"false\\\"><ng-content select=\\\"mat-placeholder\\\"></ng-content><span>{{_control.placeholder}}</span></ng-container><ng-content select=\\\"mat-label\\\" *ngSwitchCase=\\\"true\\\"></ng-content><span class=\\\"mat-placeholder-required mat-form-field-required-marker\\\" aria-hidden=\\\"true\\\" *ngIf=\\\"!hideRequiredMarker && _control.required && !_control.disabled\\\">&#32;*</span></label></span></div><div class=\\\"mat-form-field-suffix\\\" *ngIf=\\\"_suffixChildren.length\\\"><ng-content select=\\\"[matSuffix]\\\"></ng-content></div></div><div class=\\\"mat-form-field-underline\\\" #underline *ngIf=\\\"appearance != 'outline'\\\"><span class=\\\"mat-form-field-ripple\\\" [class.mat-accent]=\\\"color == 'accent'\\\" [class.mat-warn]=\\\"color == 'warn'\\\"></span></div><div class=\\\"mat-form-field-subscript-wrapper\\\" [ngSwitch]=\\\"_getDisplayedMessages()\\\"><div *ngSwitchCase=\\\"'error'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\"><ng-content select=\\\"mat-error\\\"></ng-content></div><div class=\\\"mat-form-field-hint-wrapper\\\" *ngSwitchCase=\\\"'hint'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\"><div *ngIf=\\\"hintLabel\\\" [id]=\\\"_hintLabelId\\\" class=\\\"mat-hint\\\">{{hintLabel}}</div><ng-content select=\\\"mat-hint:not([align='end'])\\\"></ng-content><div class=\\\"mat-form-field-hint-spacer\\\"></div><ng-content select=\\\"mat-hint[align='end']\\\"></ng-content></div></div></div>\",\n                // MatInput is a directive and can't have styles, so we need to include its styles here\n                // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n                // big deal for people who aren't using MatInput.\n                styles: [\".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}@media (-ms-high-contrast:active){.mat-form-field-infix{border-image:linear-gradient(transparent,transparent)}}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}[dir=rtl] .mat-form-field-label-wrapper{left:auto;right:0}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform .4s cubic-bezier(.25,.8,.25,1),color .4s cubic-bezier(.25,.8,.25,1),width .4s cubic-bezier(.25,.8,.25,1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label,.mat-form-field-empty.mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scaleY(1.0001)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(.5);opacity:0;transition:background-color .3s cubic-bezier(.55,0,.55,.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:scaleX(1);transition:transform .3s cubic-bezier(.25,.8,.25,1),opacity .1s cubic-bezier(.25,.8,.25,1),background-color .3s cubic-bezier(.25,.8,.25,1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-label-wrapper .mat-icon,.mat-form-field-subscript-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block}.mat-form-field-control-wrapper{position:relative}.mat-form-field._mat-animation-noopable .mat-form-field-label,.mat-form-field._mat-animation-noopable .mat-form-field-ripple{transition:none} .mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}@media (-ms-high-contrast:active){.mat-form-field-appearance-fill .mat-form-field-flex{outline:solid 1px}}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:'';display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}@media (-ms-high-contrast:active){.mat-form-field-appearance-fill .mat-form-field-ripple{height:0;border-top:solid 2px}}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity .6s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-fill._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em} .mat-input-element{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element::-ms-clear,.mat-input-element::-ms-reveal{display:none}.mat-input-element,.mat-input-element::-webkit-search-cancel-button,.mat-input-element::-webkit-search-decoration,.mat-input-element::-webkit-search-results-button,.mat-input-element::-webkit-search-results-decoration{-webkit-appearance:none}.mat-input-element::-webkit-caps-lock-indicator,.mat-input-element::-webkit-contacts-auto-fill-button,.mat-input-element::-webkit-credentials-auto-fill-button{visibility:hidden}.mat-input-element[type=date]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=month]::after,.mat-input-element[type=time]::after,.mat-input-element[type=week]::after{content:' ';white-space:pre;width:1px}.mat-input-element::-webkit-calendar-picker-indicator,.mat-input-element::-webkit-clear-button,.mat-input-element::-webkit-inner-spin-button{font-size:.75em}.mat-input-element::placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element::placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-moz-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element::-moz-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-webkit-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element::-webkit-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element:-ms-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element:-ms-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}select.mat-input-element{-moz-appearance:none;-webkit-appearance:none;position:relative;background-color:transparent;display:inline-flex;box-sizing:border-box;padding-top:1em;top:-1em;margin-bottom:-1em}select.mat-input-element::-ms-expand{display:none}select.mat-input-element::-moz-focus-inner{border:0}select.mat-input-element:not(:disabled){cursor:pointer}select.mat-input-element::-ms-value{color:inherit;background:0 0}@media (-ms-high-contrast:active){.mat-focused select.mat-input-element::-ms-value{color:inherit}}.mat-form-field-type-mat-native-select .mat-form-field-infix::after{content:'';width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;position:absolute;top:50%;right:0;margin-top:-2.5px;pointer-events:none}[dir=rtl] .mat-form-field-type-mat-native-select .mat-form-field-infix::after{right:auto;left:0}.mat-form-field-type-mat-native-select .mat-input-element{padding-right:15px}[dir=rtl] .mat-form-field-type-mat-native-select .mat-input-element{padding-right:0;padding-left:15px}.mat-form-field-type-mat-native-select .mat-form-field-label-wrapper{max-width:calc(100% - 10px)}.mat-form-field-type-mat-native-select.mat-form-field-appearance-outline .mat-form-field-infix::after{margin-top:-5px}.mat-form-field-type-mat-native-select.mat-form-field-appearance-fill .mat-form-field-infix::after{margin-top:-10px} .mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px);-ms-transform:none}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}@media (-ms-high-contrast:active){.mat-form-field-appearance-legacy .mat-form-field-underline{height:0;border-top:solid 1px}}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px;overflow:hidden}@media (-ms-high-contrast:active){.mat-form-field-appearance-legacy .mat-form-field-ripple{height:0;border-top:solid 2px}}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}@media (-ms-high-contrast:active){.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px} .mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-.25em;position:relative}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:.25em;left:0;right:0;bottom:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-start{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start{border-width:2px;transition:border-color .3s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity .1s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline{opacity:0;transition:opacity .6s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em}.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-end,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-gap,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-start,.mat-form-field-appearance-outline._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline{transition:none} .mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}@media (-ms-high-contrast:active){.mat-form-field-appearance-standard .mat-form-field-underline{height:0;border-top:solid 1px}}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}@media (-ms-high-contrast:active){.mat-form-field-appearance-standard .mat-form-field-ripple{height:0;border-top:2px}}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}@media (-ms-high-contrast:active){.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity .6s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-standard._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}\"],\n                animations: [matFormFieldAnimations.transitionMessages],\n                host: {\n                    'class': 'mat-form-field',\n                    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n                    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n                    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n                    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n                    '[class.mat-form-field-invalid]': '_control.errorState',\n                    '[class.mat-form-field-can-float]': '_canLabelFloat',\n                    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n                    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n                    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n                    '[class.mat-form-field-disabled]': '_control.disabled',\n                    '[class.mat-form-field-autofilled]': '_control.autofilled',\n                    '[class.mat-focused]': '_control.focused',\n                    '[class.mat-accent]': 'color == \"accent\"',\n                    '[class.mat-warn]': 'color == \"warn\"',\n                    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n                    '[class.ng-touched]': '_shouldForward(\"touched\")',\n                    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n                    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n                    '[class.ng-valid]': '_shouldForward(\"valid\")',\n                    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n                    '[class.ng-pending]': '_shouldForward(\"pending\")',\n                    '[class._mat-animation-noopable]': '!_animationsEnabled',\n                },\n                inputs: ['color'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatFormField.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_LABEL_GLOBAL_OPTIONS,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD_DEFAULT_OPTIONS,] }] },\n    { type: Platform },\n    { type: NgZone },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatFormField.propDecorators = {\n    appearance: [{ type: Input }],\n    hideRequiredMarker: [{ type: Input }],\n    hintLabel: [{ type: Input }],\n    floatLabel: [{ type: Input }],\n    underlineRef: [{ type: ViewChild, args: ['underline', { static: false },] }],\n    _connectionContainerRef: [{ type: ViewChild, args: ['connectionContainer', { static: true },] }],\n    _inputContainerRef: [{ type: ViewChild, args: ['inputContainer', { static: false },] }],\n    _label: [{ type: ViewChild, args: ['label', { static: false },] }],\n    _controlNonStatic: [{ type: ContentChild, args: [MatFormFieldControl, { static: false },] }],\n    _controlStatic: [{ type: ContentChild, args: [MatFormFieldControl, { static: true },] }],\n    _labelChildNonStatic: [{ type: ContentChild, args: [MatLabel, { static: false },] }],\n    _labelChildStatic: [{ type: ContentChild, args: [MatLabel, { static: true },] }],\n    _placeholderChild: [{ type: ContentChild, args: [MatPlaceholder, { static: false },] }],\n    _errorChildren: [{ type: ContentChildren, args: [MatError,] }],\n    _hintChildren: [{ type: ContentChildren, args: [MatHint,] }],\n    _prefixChildren: [{ type: ContentChildren, args: [MatPrefix,] }],\n    _suffixChildren: [{ type: ContentChildren, args: [MatSuffix,] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatFormFieldModule {\n}\nMatFormFieldModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    MatError,\n                    MatFormField,\n                    MatHint,\n                    MatLabel,\n                    MatPlaceholder,\n                    MatPrefix,\n                    MatSuffix,\n                ],\n                imports: [\n                    CommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    MatError,\n                    MatFormField,\n                    MatHint,\n                    MatLabel,\n                    MatPlaceholder,\n                    MatPrefix,\n                    MatSuffix,\n                ],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatFormFieldModule, MatError, MAT_FORM_FIELD_DEFAULT_OPTIONS, MatFormField, MatFormFieldControl, getMatFormFieldPlaceholderConflictError, getMatFormFieldDuplicatedHintError, getMatFormFieldMissingControlError, MatHint, MatPlaceholder, MatPrefix, MatSuffix, MatLabel, matFormFieldAnimations };\n//# sourceMappingURL=form-field.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Inject, NgZone, Optional, Self, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher, mixinErrorState } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `\\@angular/cdk/text-field` instead.\n * \\@breaking-change 8.0.0\n */\nclass MatTextareaAutosize extends CdkTextareaAutosize {\n    /**\n     * @return {?}\n     */\n    get matAutosizeMinRows() { return this.minRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matAutosizeMinRows(value) { this.minRows = value; }\n    /**\n     * @return {?}\n     */\n    get matAutosizeMaxRows() { return this.maxRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matAutosizeMaxRows(value) { this.maxRows = value; }\n    /**\n     * @return {?}\n     */\n    get matAutosize() { return this.enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matAutosize(value) { this.enabled = value; }\n    /**\n     * @return {?}\n     */\n    get matTextareaAutosize() { return this.enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matTextareaAutosize(value) { this.enabled = value; }\n}\nMatTextareaAutosize.decorators = [\n    { type: Directive, args: [{\n                selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                exportAs: 'matTextareaAutosize',\n                inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n                host: {\n                    'class': 'cdk-textarea-autosize mat-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1',\n                    '(input)': '_noopInputHandler()',\n                },\n            },] },\n];\nMatTextareaAutosize.propDecorators = {\n    matAutosizeMinRows: [{ type: Input }],\n    matAutosizeMaxRows: [{ type: Input }],\n    matAutosize: [{ type: Input, args: ['mat-autosize',] }],\n    matTextareaAutosize: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n * @type {?}\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\n/** @type {?} */\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n/** @type {?} */\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/**\n * \\@docs-private\n */\nclass MatInputBase {\n    /**\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\n/** @type {?} */\nconst _MatInputMixinBase = mixinErrorState(MatInputBase);\n/**\n * Directive that allows a native input to work inside a `MatFormField`.\n */\nclass MatInput extends _MatInputMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _platform\n     * @param {?} ngControl\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} inputValueAccessor\n     * @param {?} _autofillMonitor\n     * @param {?} ngZone\n     */\n    constructor(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this.ngControl = ngControl;\n        this._autofillMonitor = _autofillMonitor;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Whether the component is being rendered on the server.\n         */\n        this._isServer = false;\n        /**\n         * Whether the component is a native html select.\n         */\n        this._isNativeSelect = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._required = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter((/**\n         * @param {?} t\n         * @return {?}\n         */\n        t => getSupportedInputTypes().has(t)));\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                _elementRef.nativeElement.addEventListener('keyup', (/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                (event) => {\n                    /** @type {?} */\n                    let el = (/** @type {?} */ (event.target));\n                    if (!el.value && !el.selectionStart && !el.selectionEnd) {\n                        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                        // `1, 1` fixes it for the first time that you type text and\n                        // then hold delete. Toggling to `1, 1` and then back to\n                        // `0, 0` seems to completely fix it.\n                        el.setSelectionRange(1, 1);\n                        el.setSelectionRange(0, 0);\n                    }\n                }));\n            }));\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n        if (this._isNativeSelect) {\n            this.controlType = ((/** @type {?} */ (element))).multiple ? 'mat-native-select-multiple' :\n                'mat-native-select';\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get disabled() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get id() { return this._id; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set id(value) { this._id = value || this._uid; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /**\n     * Input type of the element.\n     * @return {?}\n     */\n    get type() { return this._type; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n            ((/** @type {?} */ (this._elementRef.nativeElement))).type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get value() { return this._inputValueAccessor.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Whether the element is readonly.\n     * @return {?}\n     */\n    get readonly() { return this._readonly; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set readonly(value) { this._readonly = coerceBooleanProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n    /**\n     * Focuses the input.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /**\n     * Callback for the cases where the focused state of the input changes.\n     * @param {?} isFocused\n     * @return {?}\n     */\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /**\n     * Does some manual dirty checking on the native input `value` property.\n     * @protected\n     * @return {?}\n     */\n    _dirtyCheckNativeValue() {\n        /** @type {?} */\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Make sure the input is a supported type.\n     * @protected\n     * @return {?}\n     */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /**\n     * Checks whether the input type is one of the types that are never empty.\n     * @protected\n     * @return {?}\n     */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /**\n     * Checks whether the input is invalid based on the native validation.\n     * @protected\n     * @return {?}\n     */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        /** @type {?} */\n        let validity = ((/** @type {?} */ (this._elementRef.nativeElement))).validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Determines if the component host is a textarea.\n     * @protected\n     * @return {?}\n     */\n    _isTextarea() {\n        return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get empty() {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n            !this.autofilled;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            /** @type {?} */\n            const selectElement = (/** @type {?} */ (this._elementRef.nativeElement));\n            /** @type {?} */\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return this.focused || selectElement.multiple || !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n}\nMatInput.decorators = [\n    { type: Directive, args: [{\n                selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                exportAs: 'matInput',\n                host: {\n                    /**\n                     * \\@breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                     */\n                    'class': 'mat-input-element mat-form-field-autofill-control',\n                    '[class.mat-input-server]': '_isServer',\n                    // Native input properties that are overwritten by Angular inputs need to be synced with\n                    // the native input element. Otherwise property bindings for those don't work.\n                    '[attr.id]': 'id',\n                    '[attr.placeholder]': 'placeholder',\n                    '[disabled]': 'disabled',\n                    '[required]': 'required',\n                    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-required]': 'required.toString()',\n                    '(blur)': '_focusChanged(false)',\n                    '(focus)': '_focusChanged(true)',\n                    '(input)': '_onInput()',\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatInput }],\n            },] },\n];\n/** @nocollapse */\nMatInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] }] },\n    { type: AutofillMonitor },\n    { type: NgZone }\n];\nMatInput.propDecorators = {\n    disabled: [{ type: Input }],\n    id: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    type: [{ type: Input }],\n    errorStateMatcher: [{ type: Input }],\n    value: [{ type: Input }],\n    readonly: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatInputModule {\n}\nMatInputModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [MatInput, MatTextareaAutosize],\n                imports: [\n                    CommonModule,\n                    TextFieldModule,\n                    MatFormFieldModule,\n                ],\n                exports: [\n                    TextFieldModule,\n                    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                    // be used together with `MatFormField`.\n                    MatFormFieldModule,\n                    MatInput,\n                    MatTextareaAutosize,\n                ],\n                providers: [ErrorStateMatcher],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatTextareaAutosize, MatInput, getMatInputUnsupportedTypeError, MatInputModule, MAT_INPUT_VALUE_ACCESSOR };\n//# sourceMappingURL=input.js.map\n","export default \"<nb-card>\\n\\n    <nb-card-header>Add Dashboard Component</nb-card-header>\\n    <nb-card-body>\\n        <form [formGroup]=\\\"formGroup\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n            <div class=\\\"form-group row\\\">\\n                <label for=\\\"inputEmail1\\\" class=\\\"label col-sm-3 col-form-label\\\">Component Type : </label>\\n                <div class=\\\"col-sm-9\\\">\\n                    <nb-select selected=\\\"\\\" style=\\\"width: 100%;\\\" formControlName=\\\"component_type\\\">\\n                        <!-- <nb-option value=\\\"\\\">All SubCategories List</nb-option> -->\\n                        <nb-option *ngFor=\\\"let item of componentType\\\" [value]=\\\"item.id\\\">{{item.component_name}}</nb-option>\\n                        <!-- <nb-option value=\\\"0\\\">Others</nb-option> -->\\n                    </nb-select>\\n                    <div *ngIf=\\\"submited&&formGroup.get('component_type').invalid&&formGroup.get('component_type').errors.required\\\">\\n                        <p class=\\\"text-danger\\\">Please Fill this field</p>\\n                    </div>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"form-group row\\\">\\n                <div class=\\\"offset-sm-3 col-sm-9\\\">\\n                    <button type=\\\"submit\\\" nbButton status=\\\"primary\\\" [disabled]=\\\"uploading\\\">Add Category</button>\\n                </div>\\n            </div>\\n        </form>\\n    </nb-card-body>\\n\\n</nb-card>\"","export default \"<div *ngIf=\\\"!loading\\\" [ngSwitch]=\\\"data.component.component_name\\\">\\n    <ngx-slideradds [data]=\\\"data\\\" (eventEmitor)=\\\"refresh($event)\\\" *ngSwitchCase=\\\"'Slider Adds'\\\"></ngx-slideradds>\\n    <ngx-imageadd [data]=\\\"data\\\" (eventEmitor)=\\\"refresh($event)\\\" *ngSwitchCase=\\\"'Image Add'\\\"></ngx-imageadd>\\n    <ngx-productslider [data]=\\\"data\\\" (eventEmitor)=\\\"refresh($event)\\\" *ngSwitchCase=\\\"'Product Slider'\\\"></ngx-productslider>\\n</div>\"","export default \"<div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-lg-6\\\">\\n            <nb-card>\\n                <nb-card-header></nb-card-header>\\n                <nb-card-body>\\n                    <form [formGroup]=\\\"formGroup\\\">\\n                        <div class=\\\"form-group row\\\">\\n                            <label for=\\\"inputEmail1\\\" class=\\\"label col-sm-3 col-form-label\\\">Product </label>\\n                            <div class=\\\"col-sm-9\\\">\\n                                <input type=\\\"email\\\" nbInput fullWidth id=\\\"inputEmail1\\\" [matAutocomplete]=\\\"auto\\\" placeholder=\\\"Category Name ...\\\" formControlName=\\\"productName\\\">\\n                                <mat-autocomplete #auto=\\\"matAutocomplete\\\">\\n                                    <mat-option style=\\\"background-color: white;color:black;\\\" *ngFor=\\\"let state of suggestion\\\" [value]=\\\"state.product_name\\\" (click)=\\\"onSelect(state.id)\\\">\\n                                        <img class=\\\"example-option-img\\\" aria-hidden [src]=\\\"baseurl+state.images\\\" height=\\\"50\\\">\\n                                        <span>{{state.product_name}}</span> |\\n                                        <small>Id: {{state.id}}</small>\\n                                    </mat-option>\\n                                </mat-autocomplete>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"form-group row\\\">\\n                            <div class=\\\"offset-sm-3 col-sm-9\\\">\\n\\n                            </div>\\n                        </div>\\n                    </form>\\n                </nb-card-body>\\n            </nb-card>\\n        </div>\\n    </div>\\n</div>\"","export default \"<div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-lg-6\\\">\\n            <nb-card *ngIf=\\\"data.data.length == 0\\\">\\n                <nb-card-header>{{data.component.component_name}}</nb-card-header>\\n                <nb-card-body>\\n                    <form [formGroup]=\\\"formGroup\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                        <div class=\\\"form-group row\\\">\\n                            <label for=\\\"inputEmail1\\\" class=\\\"label col-sm-3 col-form-label\\\">Title</label>\\n                            <div class=\\\"col-sm-9\\\">\\n                                <input type=\\\"email\\\" nbInput fullWidth id=\\\"inputEmail1\\\" placeholder=\\\"Category Name ...\\\" formControlName=\\\"title\\\">\\n                                <div *ngIf=\\\"submited&&formGroup.get('title').invalid&&formGroup.get('title').errors.required\\\">\\n                                    <p class=\\\"text-danger\\\">Please Fill this field</p>\\n                                </div>\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\\"form-group row\\\">\\n                            <label for=\\\"inputEmail1\\\" class=\\\"label col-sm-3 col-form-label\\\">Slide Image</label>\\n                            <div class=\\\"col-sm-9\\\">\\n                                <input type=\\\"file\\\" nbInput fullWidth (change)=\\\"uploadImage($event)\\\">\\n                                <div *ngIf=\\\"submited&&formGroup.get('file').invalid&&formGroup.get('file').errors.required\\\">\\n                                    <p class=\\\"text-danger\\\">Please upload a file</p>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"form-group row\\\">\\n                            <div class=\\\"offset-sm-3 col-sm-9\\\">\\n                                <button type=\\\"submit\\\" nbButton status=\\\"primary\\\" [disabled]=\\\"\\\">Submit</button>\\n                            </div>\\n                        </div>\\n                    </form>\\n                </nb-card-body>\\n            </nb-card>\\n\\n            <nb-card *ngIf=\\\"data.data.length > 0\\\">\\n                <nb-card-header>{{data.data[0].title}}</nb-card-header>\\n                <nb-card-body>\\n                    <div [ngStyle]=\\\"{'width': '100%',\\n                                'height': '250px',\\n                                'background-image': 'url('+baseUrl+data.data[0].image+')',\\n                                'background-size': 'cover',\\n                                'background-repeat': 'no-repeat',\\n                                'background-position': 'center',\\n                                'background-color':'red'\\n                                }\\\">\\n\\n                    </div>\\n                </nb-card-body>\\n            </nb-card>\\n\\n        </div>\\n        <div class=\\\"col-lg-6\\\" *ngIf=\\\"data.data.length > 0\\\">\\n            <nb-card>\\n                <nb-card-header></nb-card-header>\\n                <nb-card-body>\\n                    <form [formGroup]=\\\"addproductGroup\\\">\\n                        <div class=\\\"form-group row\\\">\\n                            <label for=\\\"inputEmail1\\\" class=\\\"label col-sm-3 col-form-label\\\">Product </label>\\n                            <div class=\\\"col-sm-9\\\">\\n                                <input type=\\\"email\\\" nbInput fullWidth id=\\\"inputEmail1\\\" [matAutocomplete]=\\\"auto\\\" placeholder=\\\"Category Name ...\\\" formControlName=\\\"productName\\\">\\n                                <mat-autocomplete #auto=\\\"matAutocomplete\\\">\\n                                    <mat-option style=\\\"background-color: white;color:black;\\\" *ngFor=\\\"let state of suggestion\\\" [value]=\\\"state.product_name\\\" (click)=\\\"onSelect(state.id)\\\">\\n                                        <img class=\\\"example-option-img\\\" aria-hidden [src]=\\\"baseUrl+state.images\\\" height=\\\"50\\\">\\n                                        <span>{{state.product_name}}</span> |\\n                                        <small>Id: {{state.id}}</small>\\n                                    </mat-option>\\n                                </mat-autocomplete>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"form-group row\\\">\\n                            <div class=\\\"offset-sm-3 col-sm-9\\\">\\n\\n                            </div>\\n                        </div>\\n                    </form>\\n                </nb-card-body>\\n            </nb-card>\\n        </div>\\n        <div class=\\\"col-lg-8\\\" *ngIf=\\\"data.data.length > 0\\\">\\n            <nb-card>\\n                <nb-card-header>\\n                    Product Table\\n                    <!-- <nb-action style=\\\"float: right;\\\">\\n                        <button [routerLink]=\\\"['','mobile','addproduct','slider',selectedSliderId]\\\" nbButton status=\\\"primary\\\" [disabled]=\\\"false\\\">Add Component</button>\\n                    </nb-action> -->\\n                </nb-card-header>\\n\\n                <nb-card-body>\\n                    <table>\\n                        <thead>\\n                            <tr>\\n                                <th>\\n                                    Product Id\\n                                </th>\\n                                <th>\\n                                    Product Name\\n                                </th>\\n\\n                                <th>\\n                                    Delete\\n                                </th>\\n\\n                            </tr>\\n                        </thead>\\n                        <tbody>\\n                            <tr *ngFor=\\\"let x of data.data[0].product\\\">\\n                                <td>\\n                                    {{x.id}}\\n                                </td>\\n                                <td>\\n                                    {{x.product_name}}\\n                                </td>\\n                                <td>\\n                                    <i class=\\\"nb-trash\\\" (click)=\\\"onDelete(x.id)\\\" style=\\\"font-size: 35px;cursor:pointer;\\\" aria-hidden=\\\"true\\\"></i>\\n                                    <!--(click)=\\\"onDelete(selectedSliderId,x.id)\\\" <i class=\\\"arrow-upward-outline\\\" style=\\\"font-size: 35px;\\\" aria-hidden=\\\"true\\\"></i> -->\\n                                    <!-- <i class=\\\"fas fa-arrow-up text-center\\\" style=\\\"font-size: 25px;\\\"></i> -->\\n                                </td>\\n\\n\\n                            </tr>\\n                        </tbody>\\n\\n                    </table>\\n                </nb-card-body>\\n            </nb-card>\\n        </div>\\n    </div>\\n\\n</div>\"","export default \"<div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-lg-6\\\" *ngIf=\\\"data.data.length == 0\\\">\\n            <nb-card>\\n                <nb-card-header>{{data.component.component_name}}</nb-card-header>\\n                <nb-card-body>\\n                    <form [formGroup]=\\\"formGroup\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                        <div class=\\\"form-group row\\\">\\n                            <label for=\\\"inputEmail1\\\" class=\\\"label col-sm-3 col-form-label\\\">Title</label>\\n                            <div class=\\\"col-sm-9\\\">\\n                                <input type=\\\"email\\\" nbInput fullWidth id=\\\"inputEmail1\\\" placeholder=\\\"Category Name ...\\\" formControlName=\\\"title\\\">\\n                                <div *ngIf=\\\"submited&&formGroup.get('title').invalid&&formGroup.get('title').errors.required\\\">\\n                                    <p class=\\\"text-danger\\\">Please Fill this field</p>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"form-group row\\\">\\n                            <div class=\\\"offset-sm-3 col-sm-9\\\">\\n                                <button type=\\\"submit\\\" nbButton status=\\\"primary\\\" [disabled]=\\\"\\\">Submit</button>\\n                            </div>\\n                        </div>\\n                    </form>\\n                </nb-card-body>\\n            </nb-card>\\n\\n            <!-- <nb-card *ngIf=\\\"data.data.length > 0\\\">\\n                <nb-card-header>{{data.data[0].title}}</nb-card-header>\\n                <nb-card-body>\\n                    <div [ngStyle]=\\\"{'width': '100%',\\n                              'height': '250px',\\n                              'background-image': 'url('+baseUrl+data.data[0].image+')',\\n                              'background-size': 'cover',\\n                              'background-repeat': 'no-repeat',\\n                              'background-position': 'center',\\n                              'background-color':'red'\\n                              }\\\">\\n\\n                    </div>\\n                </nb-card-body>\\n            </nb-card> -->\\n\\n        </div>\\n        <div class=\\\"col-lg-6\\\" *ngIf=\\\"data.data.length > 0\\\">\\n            <nb-card>\\n                <nb-card-header></nb-card-header>\\n                <nb-card-body>\\n                    <form [formGroup]=\\\"addproductGroup\\\">\\n                        <div class=\\\"form-group row\\\">\\n                            <label for=\\\"inputEmail1\\\" class=\\\"label col-sm-3 col-form-label\\\">Product </label>\\n                            <div class=\\\"col-sm-9\\\">\\n                                <input type=\\\"email\\\" nbInput fullWidth id=\\\"inputEmail1\\\" [matAutocomplete]=\\\"auto\\\" placeholder=\\\"Category Name ...\\\" formControlName=\\\"productName\\\">\\n                                <mat-autocomplete #auto=\\\"matAutocomplete\\\">\\n                                    <mat-option style=\\\"background-color: white;color:black;\\\" *ngFor=\\\"let state of suggestion\\\" [value]=\\\"state.product_name\\\" (click)=\\\"onSelect(state.id)\\\">\\n                                        <img class=\\\"example-option-img\\\" aria-hidden [src]=\\\"baseUrl+state.images\\\" height=\\\"50\\\">\\n                                        <span>{{state.product_name}}</span> |\\n                                        <small>Id: {{state.id}}</small>\\n                                    </mat-option>\\n                                </mat-autocomplete>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"form-group row\\\">\\n                            <div class=\\\"offset-sm-3 col-sm-9\\\">\\n\\n                            </div>\\n                        </div>\\n                    </form>\\n                </nb-card-body>\\n            </nb-card>\\n        </div>\\n        <div class=\\\"col-lg-6\\\" *ngIf=\\\"data.data.length > 0\\\">\\n            <nb-card>\\n                <nb-card-header>\\n                    {{data.data[0].title}} ( Product Table)\\n                    <!-- <nb-action style=\\\"float: right;\\\">\\n                      <button [routerLink]=\\\"['','mobile','addproduct','slider',selectedSliderId]\\\" nbButton status=\\\"primary\\\" [disabled]=\\\"false\\\">Add Component</button>\\n                  </nb-action> -->\\n                </nb-card-header>\\n\\n                <nb-card-body>\\n                    <table>\\n                        <thead>\\n                            <tr>\\n                                <th>\\n                                    Product Id\\n                                </th>\\n                                <th>\\n                                    Product Name\\n                                </th>\\n\\n                                <th>\\n                                    Delete\\n                                </th>\\n\\n                            </tr>\\n                        </thead>\\n                        <tbody>\\n                            <tr *ngFor=\\\"let x of data.data[0].product\\\">\\n                                <td>\\n                                    {{x.id}}\\n                                </td>\\n                                <td>\\n                                    {{x.product_name}}\\n                                </td>\\n                                <td>\\n                                    <i class=\\\"nb-trash\\\" (click)=\\\"onDelete(x.id)\\\" style=\\\"font-size: 35px;cursor:pointer;\\\" aria-hidden=\\\"true\\\"></i>\\n                                    <!--(click)=\\\"onDelete(selectedSliderId,x.id)\\\" <i class=\\\"arrow-upward-outline\\\" style=\\\"font-size: 35px;\\\" aria-hidden=\\\"true\\\"></i> -->\\n                                    <!-- <i class=\\\"fas fa-arrow-up text-center\\\" style=\\\"font-size: 25px;\\\"></i> -->\\n                                </td>\\n\\n\\n                            </tr>\\n                        </tbody>\\n\\n                    </table>\\n                </nb-card-body>\\n            </nb-card>\\n        </div>\\n    </div>\\n\\n</div>\"","export default \"<div class=\\\"Container\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-lg-6 col-md-6\\\">\\n            <nb-card>\\n                <nb-card-header>{{data.component.component_name}}</nb-card-header>\\n                <nb-card-body>\\n                    <form [formGroup]=\\\"formGroup\\\" (ngSubmit)=\\\"onTitleSubmit()\\\">\\n                        <div class=\\\"form-group row\\\">\\n                            <label for=\\\"inputEmail1\\\" class=\\\"label col-sm-3 col-form-label\\\">Title</label>\\n                            <div class=\\\"col-sm-9\\\">\\n                                <input type=\\\"email\\\" nbInput fullWidth id=\\\"inputEmail1\\\" placeholder=\\\"Category Name ...\\\" formControlName=\\\"title\\\">\\n                                <div *ngIf=\\\"submited&&formGroup.get('title').invalid&&formGroup.get('title').errors.required\\\">\\n                                    <p class=\\\"text-danger\\\">Please Fill this field</p>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"form-group row\\\" *ngIf=\\\"data.data.length == 0\\\">\\n                            <div class=\\\"offset-sm-3 col-sm-9\\\">\\n                                <button type=\\\"submit\\\" nbButton status=\\\"primary\\\" [disabled]=\\\"uploading\\\">Submit</button>\\n                            </div>\\n                        </div>\\n                    </form>\\n                </nb-card-body>\\n            </nb-card>\\n        </div>\\n\\n\\n        <div class=\\\"col-lg-6 col-md-6\\\" *ngIf=\\\"data.data.length > 0\\\">\\n            <nb-card>\\n\\n                <nb-card-header>Add Slides</nb-card-header>\\n                <nb-card-body>\\n                    <form [formGroup]=\\\"slideGroup\\\" (ngSubmit)=\\\"onSubmitSLides()\\\">\\n                        <div class=\\\"form-group row\\\">\\n                            <label for=\\\"inputEmail1\\\" class=\\\"label col-sm-3 col-form-label\\\">Slide Title</label>\\n                            <div class=\\\"col-sm-9\\\">\\n                                <input type=\\\"email\\\" nbInput fullWidth id=\\\"inputEmail1\\\" placeholder=\\\"Slide Name\\\" formControlName=\\\"title\\\">\\n                                <div *ngIf=\\\"submitedSlide&&slideGroup.get('title').invalid&&slideGroup.get('title').errors.required\\\">\\n                                    <p class=\\\"text-danger\\\">Please Fill this field</p>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"form-group row\\\">\\n                            <label for=\\\"inputEmail1\\\" class=\\\"label col-sm-3 col-form-label\\\">Slide Image</label>\\n                            <div class=\\\"col-sm-9\\\">\\n                                <input type=\\\"file\\\" nbInput fullWidth (change)=\\\"uploadImage($event)\\\">\\n                                <div *ngIf=\\\"submitedSlide&&slideGroup.get('file').invalid&&slideGroup.get('file').errors.required\\\">\\n                                    <p class=\\\"text-danger\\\">Please upload a file</p>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"form-group row\\\">\\n                            <div class=\\\"offset-sm-3 col-sm-9\\\">\\n                                <button type=\\\"submit\\\" nbButton status=\\\"primary\\\" [disabled]=\\\"submitedSlide\\\">Add Slides</button>\\n                            </div>\\n                        </div>\\n                    </form>\\n                </nb-card-body>\\n\\n            </nb-card>\\n        </div>\\n\\n\\n\\n        <div class=\\\"col-lg-6 col-md-6\\\" *ngIf=\\\"data.data.length > 0\\\">\\n            <nb-card>\\n                <nb-card-header>\\n                    Slides\\n                </nb-card-header>\\n                <nb-card-body>\\n                    <div class=\\\"container\\\">\\n                        <div class=\\\"row\\\" style=\\\"margin-top:8px;\\\" *ngFor=\\\"let x of data.data[0].entries\\\">\\n                            <div class=\\\"col-lg-6\\\">\\n                                <div [ngStyle]=\\\"{'width': '300px',\\n                                  'height': '150px',\\n                                  'background-image': 'url('+BASE_URL+x.image+')',\\n                                  'background-size': 'cover',\\n                                  'background-repeat': 'no-repeat',\\n                                  'background-position': 'center',\\n                                  'background-color':'red'\\n                                  }\\\">\\n\\n                                </div>\\n\\n                            </div>\\n                            <div class=\\\"col-lg-6\\\">\\n                                <strong>Title : </strong><br> {{x.title}}\\n                                <br><br>\\n                                <button type=\\\"submit\\\" (click)=\\\"onSelectSlider(x.id,x.product)\\\" nbButton status=\\\"primary\\\" [disabled]=\\\"uploading\\\">products</button>\\n                                <div style=\\\"margin-top:10px;\\\">\\n                                    <button (click)=\\\"onDeleteSlider(x.id,content)\\\">\\n                                    <i class=\\\"nb-trash\\\"  style=\\\"font-size: 35px;cursor:pointer;\\\" aria-hidden=\\\"true\\\"></i>\\n                                  </button>\\n                                </div>\\n\\n\\n                            </div>\\n                            <div class=\\\"col-lg-12 divider\\\">\\n\\n                            </div>\\n                        </div>\\n                    </div>\\n                </nb-card-body>\\n            </nb-card>\\n        </div>\\n        <div class=\\\"col-lg-6\\\" *ngIf=\\\"data.data.length > 0\\\">\\n            <nb-card *ngIf=\\\"selectedSliderId != 0\\\">\\n                <nb-card-header>\\n                    Product Table\\n                    <nb-action style=\\\"float: right;\\\">\\n                        <button [routerLink]=\\\"['','mobile','addproduct','slider',selectedSliderId]\\\" nbButton status=\\\"primary\\\" [disabled]=\\\"false\\\">Add Component</button>\\n                    </nb-action>\\n                </nb-card-header>\\n\\n                <nb-card-body>\\n                    <table>\\n                        <thead>\\n                            <tr>\\n                                <th>\\n                                    Product Id\\n                                </th>\\n                                <th>\\n                                    Product Name\\n                                </th>\\n\\n                                <th>\\n                                    Delete\\n                                </th>\\n\\n                            </tr>\\n                        </thead>\\n                        <tbody>\\n                            <tr *ngFor=\\\"let x of productList\\\">\\n                                <td>\\n                                    {{x.id}}\\n                                </td>\\n                                <td>\\n                                    {{x.product_name}}\\n                                </td>\\n                                <td>\\n                                    <i (click)=\\\"onDelete(selectedSliderId,x.id)\\\" class=\\\"nb-trash\\\" style=\\\"font-size: 35px;cursor:pointer;\\\" aria-hidden=\\\"true\\\"></i>\\n                                    <!-- <i class=\\\"arrow-upward-outline\\\" style=\\\"font-size: 35px;\\\" aria-hidden=\\\"true\\\"></i> -->\\n                                    <!-- <i class=\\\"fas fa-arrow-up text-center\\\" style=\\\"font-size: 25px;\\\"></i> -->\\n                                </td>\\n\\n\\n                            </tr>\\n                        </tbody>\\n\\n                    </table>\\n                </nb-card-body>\\n            </nb-card>\\n        </div>\\n    </div>\\n</div>\\n\\n<ng-template #content let-modal>\\n    <div class=\\\"modal-header\\\">\\n        <h4 class=\\\"modal-title\\\" id=\\\"modal-basic-title\\\">Confirmation !</h4>\\n        <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"modal.dismiss('Cross click')\\\">\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\n    </button>\\n    </div>\\n    <div class=\\\"modal-body\\\">\\n        <strong>Are you sure you want to delete ?</strong>\\n    </div>\\n    <div class=\\\"modal-footer\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-outline-dark\\\" (click)=\\\"modal.close('sure')\\\">sure</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-outline-dark\\\" (click)=\\\"modal.close('cancel')\\\">cancel</button>\\n    </div>\\n</ng-template>\"","export default \"<nb-card>\\n    <nb-card-header>\\n        All Category\\n        <nb-action style=\\\"float: right;\\\">\\n            <button routerLink=\\\"/mobile/addcomponent\\\" nbButton status=\\\"primary\\\" [disabled]=\\\"false\\\">Add Component</button>\\n        </nb-action>\\n    </nb-card-header>\\n\\n\\n    <nb-card-body>\\n        <!-- <ng2-smart-table [settings]=\\\"settings\\\" [source]=\\\"source\\\" (deleteConfirm)=\\\"onDeleteConfirm($event)\\\">\\n    </ng2-smart-table> -->\\n        <table>\\n            <thead>\\n                <tr>\\n                    <th>\\n                        Id\\n                    </th>\\n                    <th>\\n                        Component Type\\n                    </th>\\n\\n                    <th>\\n                        Delete\\n                    </th>\\n                    <th>\\n                        Move up\\n                    </th>\\n                    <th>\\n                        Move Down\\n                    </th>\\n\\n                    <th>\\n                        Actions\\n                    </th>\\n                </tr>\\n            </thead>\\n            <tbody>\\n                <tr *ngFor=\\\"let x of screenComponent\\\">\\n                    <td>\\n                        {{x.id}}\\n                    </td>\\n                    <td>\\n                        {{x.component_type.component_name}}\\n                    </td>\\n                    <td>\\n                        <i class=\\\"nb-trash\\\" style=\\\"font-size: 35px;cursor:pointer;\\\" aria-hidden=\\\"true\\\"></i>\\n                        <!-- <i class=\\\"arrow-upward-outline\\\" style=\\\"font-size: 35px;\\\" aria-hidden=\\\"true\\\"></i> -->\\n                        <!-- <i class=\\\"fas fa-arrow-up text-center\\\" style=\\\"font-size: 25px;\\\"></i> -->\\n                    </td>\\n                    <td class=\\\"text-center\\\">\\n                        <!-- <i class=\\\"nb-trash\\\" style=\\\"font-size: 35px;\\\" aria-hidden=\\\"true\\\"></i> -->\\n                        <!-- <i class=\\\"arrow-upward-outline\\\" style=\\\"font-size: 35px;\\\" aria-hidden=\\\"true\\\"></i> -->\\n                        <i class=\\\"fas fa-arrow-up\\\" style=\\\"font-size: 25px;cursor:pointer;\\\"></i>\\n                    </td>\\n                    <td class=\\\"text-center\\\">\\n                        <!-- <i class=\\\"nb-trash\\\" style=\\\"font-size: 35px;\\\" aria-hidden=\\\"true\\\"></i> -->\\n                        <!-- <i class=\\\"arrow-upward-outline\\\" style=\\\"font-size: 35px;\\\" aria-hidden=\\\"true\\\"></i> -->\\n                        <i class=\\\"fas fa-arrow-down\\\" style=\\\"font-size: 25px;cursor:pointer;\\\"></i>\\n                    </td>\\n                    <td>\\n                        <button [routerLink]=\\\"['details',x.id]\\\" nbButton status=\\\"primary\\\" [disabled]=\\\"(\\n                          x.component_type.component_name == 'Row Category' || x.component_type.component_name == 'List Category'\\n                        )?true:false\\\"> Details </button>\\n                    </td>\\n                </tr>\\n            </tbody>\\n\\n        </table>\\n    </nb-card-body>\\n    <div class=\\\"row card-footer\\\">\\n        <!-- <div style=\\\"padding-left: 16px;\\\">\\n        <ngb-pagination [collectionSize]=\\\"paginator.total_count\\\" [boundaryLinks]=\\\"true\\\" (pageChange)=\\\"getCouponData($event)\\\" [pageSize]=\\\"10\\\"></ngb-pagination>\\n    </div> -->\\n\\n    </div>\\n</nb-card>\"","export default \"<nb-card>\\n    <nb-card-body>\\n        <div class=\\\"container-fluid\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-lg-6\\\">\\n\\n                </div>\\n                <div class=\\\"col-lg-6\\\">\\n                    <div class=\\\"mobilescreen\\\" style=\\\"background-color: white;\\\">\\n                        <div class=\\\"appBar\\\">\\n\\n                        </div>\\n                        <ngx-slider></ngx-slider>\\n                        <ngx-productwithtitle></ngx-productwithtitle>\\n                        <ngx-imagesingle></ngx-imagesingle>\\n                        <ngx-slider></ngx-slider>\\n                        <ngx-imagesingle></ngx-imagesingle>\\n                        <ngx-productwithtitle></ngx-productwithtitle>\\n                        <ngx-productwithtitle></ngx-productwithtitle>\\n                        <ngx-productwithtitle></ngx-productwithtitle>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </nb-card-body>\\n</nb-card>\"","export default \"<div class=\\\"showimage\\\">\\n    <div class=\\\"showimage-background\\\">\\n        <!-- Slider -->\\n        <div class=\\\"showimage-content\\\">IMAGE ADD</div>\\n        <div class=\\\"diagonal\\\">\\n\\n        </div>\\n    </div>\\n</div>\"","export default \"<div class=\\\"productList\\\">\\n    <div class=\\\"title\\\">\\n        <strong>TITLE</strong>\\n    </div>\\n    <div class=\\\"productList-image\\\">\\n        <!-- Slider -->\\n        <div class=\\\"productList-content\\\">Product List</div>\\n        <div class=\\\"diagonal\\\">\\n\\n        </div>\\n    </div>\\n</div>\"","export default \"<div class=\\\"slider\\\">\\n    <div class=\\\"slider-image\\\">\\n        <!-- Slider -->\\n        <div class=\\\"slider-content\\\">SLIDER</div>\\n        <div class=\\\"diagonal\\\">\\n\\n        </div>\\n    </div>\\n</div>\"","export default \"<p>topproducts works!</p>\\n\"","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vYmlsZS9hZGRkYXNoYm9hcmRjb21wb25lbnQvYWRkZGFzaGJvYXJkY29tcG9uZW50LmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { FormControl,FormGroup , Validators } from '@angular/forms';\nimport { ToasterConfig } from 'angular2-toaster';\nimport {\n  NbComponentStatus,\n  NbGlobalLogicalPosition,\n  NbGlobalPhysicalPosition,\n  NbGlobalPosition,\n  NbToastrService,\n} from '@nebular/theme';\nimport { ProductService } from '../../services/product/product.service';\n\n\n@Component({\n  selector: 'ngx-adddashboardcomponent',\n  templateUrl: './adddashboardcomponent.component.html',\n  styleUrls: ['./adddashboardcomponent.component.scss']\n})\nexport class AdddashboardcomponentComponent implements OnInit {\n\n  formGroup:FormGroup;\n  uploading:boolean = false;\n  submited:boolean = false;\n  config: ToasterConfig;\n  componentType:any = [];\n\n  constructor(private productService:ProductService,private toastrService: NbToastrService) { }\n\n  ngOnInit() {\n    this.formGroup = new FormGroup({\n      component_type:new FormControl('',[Validators.required])\n    });\n\n    this.productService.getMethod(\n      (response)=>{\n\n        this.componentType = response;\n\n      },\n      (error)=>{\n        this.showToaster(\"OOPS !!\",\"Something went wrong please try again ..\",\"danger\");\n      },\n      {},\n      \"dashboard/componenttype\"\n      );\n\n  }\n\n  onSubmit(){\n    if(this.formGroup.valid){\n      // const formData = new FormData();\n      // formData.append('categories_image',this.formGroup.get('file').value);\n      // formData.append('category_name',this.formGroup.get('name').value);\n      let data = {\"component_type\":this.formGroup.get('component_type').value};\n      this.uploading = true;\n      this.productService.postMethod(\n        (response)=>{\n          this.uploading = false;\n          this.showToaster(\"Success\",\"The component added successfully.\",\"primary\");\n\n        },\n        (error)=>{\n          console.log(error);\n          this.uploading = false;\n          this.showToaster(\"OOPS !!\",\"Something went wrong please try again ..\",\"danger\");\n        },\n        data,\n        \"dashboard/component\"\n      );\n\n    }\n    else{\n      this.showToaster(\"OOPS !!\",\"Please Select a Component type.\",\"danger\");\n    }\n  }\n\n  showToaster(title,body,status){\n    const config = {\n      status:status ,\n      destroyByClick:false,\n      duration: 2000,\n      hasIcon: true,\n      position:NbGlobalLogicalPosition.BOTTOM_END,\n      preventDuplicates: false,\n    };\n\n\n\n    this.toastrService.show(\n      body,\n      title,\n      config);\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vYmlsZS9jb21wb25lbnRkZXRhaWxzL2NvbXBvbmVudGRldGFpbHMuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { ProductService } from '../../services/product/product.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'ngx-componentdetails',\n  templateUrl: './componentdetails.component.html',\n  styleUrls: ['./componentdetails.component.scss']\n})\nexport class ComponentdetailsComponent implements OnInit {\n  data:any;\n  loading:boolean = true;\n\n  constructor(private productService:ProductService,private route:Router) { }\n\n  ngOnInit() {\n    this.getData();\n\n  }\n\n  getData(){\n    this.loading = true;\n    this.data = {};\n    let path = this.route.url.split(\"/\");\n    let id = path[path.length - 1];\n    this.productService.getMethod(\n      (response)=>{\n        this.loading = false;\n        console.log(response);\n        this.data = response;\n      },\n      (error)=>{\n        console.log(error);\n      },\n      {},\n      \"dashboard/componentdetails/\"+id.toString()\n    );\n  }\n\n  refresh($event){\n    console.log(\"refresh\");\n    this.getData();\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vYmlsZS9jb21wb25lbnRzL2FkZHByb2R1Y3QvYWRkcHJvZHVjdC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { FormControl , FormGroup } from '@angular/forms';\nimport { ProductService } from '../../../services/product/product.service';\nimport { imageBaseUrl } from '../../../Models/common';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'ngx-addproduct',\n  templateUrl: './addproduct.component.html',\n  styleUrls: ['./addproduct.component.scss']\n})\nexport class AddproductComponent implements OnInit {\n\n  // productName = new FormControl();\n  suggestion:any = [];\n  formGroup:FormGroup;\n  baseurl:String;\n\n  constructor(private productService:ProductService,private router:Router) { }\n\n  ngOnInit() {\n    this.baseurl = imageBaseUrl;\n    this.formGroup = new FormGroup({\n      productName: new FormControl('')\n    });\n    this.formGroup.get('productName').valueChanges.subscribe((data)=>{\n      // console.log(data);\n      if(data.toString().length > 0){\n        this.productService.getMethod(\n          (response)=>{\n            this.suggestion = response;\n          },\n          (error)=>{},\n          {\n            \"query\":data\n          },\n          \"dashboard/search\"\n        );\n      }\n      else{\n        this.suggestion = [];\n      }\n    });\n  }\n\n  onSelect(id){\n    console.log(id);\n    // let path = this.router.url;\n    let listOfPath = this.router.url.split(\"/\");\n    let sliderImageId = listOfPath[listOfPath.length - 1];\n\n    this.productService.postMethod(\n      (response)=>{\n        alert(\"Product added successfully\");\n      },\n      (error)=>{},\n      {\"product_id\":id},\n      \"dashboard/addsliderproduct/\"+sliderImageId\n    );\n  }\n\n}\n","export default \"table {\\n  width: 100%;\\n  border: 1px solid #f2f2f2; }\\n\\ntd {\\n  text-align: center;\\n  padding: 8px;\\n  border: 1px solid #f2f2f2; }\\n\\nth {\\n  text-align: center;\\n  padding: 16px;\\n  border: 1px solid #f2f2f2; }\\n\\ntr:nth-child(even) {\\n  background-color: #f2f2f2; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9iaWxlL2NvbXBvbmVudHMvaW1hZ2VhZGQvRTpcXHByb2plY3Qtb25lLWZvci1hbGxcXGludGVybWVkaWF0ZVxcYW5ndWxhci1qYW4xL3NyY1xcYXBwXFxtb2JpbGVcXGNvbXBvbmVudHNcXGltYWdlYWRkXFxpbWFnZWFkZC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFdBQVc7RUFDWCx5QkFBeUIsRUFBQTs7QUFHN0I7RUFDSSxrQkFBa0I7RUFDbEIsWUFBWTtFQUNaLHlCQUF5QixFQUFBOztBQUc3QjtFQUNJLGtCQUFrQjtFQUNsQixhQUFhO0VBQ2IseUJBQXlCLEVBQUE7O0FBRzdCO0VBQ0kseUJBQXlCLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9tb2JpbGUvY29tcG9uZW50cy9pbWFnZWFkZC9pbWFnZWFkZC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbInRhYmxlIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2YyZjJmMjtcclxufVxyXG5cclxudGQge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgcGFkZGluZzogOHB4O1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2YyZjJmMjtcclxufVxyXG5cclxudGgge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgcGFkZGluZzogMTZweDtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNmMmYyZjI7XHJcbn1cclxuXHJcbnRyOm50aC1jaGlsZChldmVuKSB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjJmMmYyO1xyXG59Il19 */\"","import { Component, OnInit , Input ,Output , EventEmitter } from '@angular/core';\nimport { FormGroup , FormControl , Validators,  } from '@angular/forms';\nimport { imageBaseUrl } from '../../../Models/common';\nimport {  } from '../../../Models/common';\nimport { ProductService } from '../../../services/product/product.service';\nimport {NgbModal, ModalDismissReasons} from '@ng-bootstrap/ng-bootstrap';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'ngx-imageadd',\n  templateUrl: './imageadd.component.html',\n  styleUrls: ['./imageadd.component.scss']\n})\nexport class ImageaddComponent implements OnInit {\n  @Input() data;\n  @Output() eventEmitor = new EventEmitter();\n  formGroup:FormGroup;\n  addproductGroup:FormGroup;\n  submited:boolean = false;\n  baseUrl:string = '';\n  loading = false;\n  suggestion:any = [];\n\n\n  constructor(private productService:ProductService,private router:Router) { }\n\n  ngOnInit() {\n    this.baseUrl = imageBaseUrl;\n    this.formGroup = new FormGroup({\n\n      title:new FormControl('',[Validators.required]),\n      file:new FormControl('',[Validators.required])\n    });\n\n    this.addproductGroup = new FormGroup({\n      productName: new FormControl('')\n    });\n    this.addproductGroup.get('productName').valueChanges.subscribe((data)=>{\n      // console.log(data);\n      if(data.toString().length > 0){\n        this.productService.getMethod(\n          (response)=>{\n            this.suggestion = response;\n          },\n          (error)=>{},\n          {\n            \"query\":data\n          },\n          \"dashboard/search\"\n        );\n      }\n      else{\n        this.suggestion = [];\n      }\n    });\n  }\n\n  onSubmit(){\n    console.log(\">>>>\");\n    if(this.formGroup.valid){\n      this.loading = true;\n      let formData =new FormData();\n      formData.append('title',this.formGroup.get('title').value);\n      formData.append('image',this.formGroup.get('file').value);\n      formData.append('image_adds',this.data.id);\n      this.productService.postMethod(\n        (response)=>{\n          console.log(response);\n          this.loading = false;\n          this.eventEmitor.emit();\n        },\n        (error)=>{},\n        formData,\n        \"dashboard/singleimageadd/1\"\n      );\n\n    }\n    else{\n      alert(\"Please provide a valid details\");\n    }\n\n  }\n\n  uploadImage($event){\n    if($event.target.files.length > 0)\n    {\n\n      this.formGroup.patchValue({\n        file:$event.target.files[0]\n      });\n\n    }\n  }\n\n  onSelect(id){\n    console.log(id);\n    // let path = this.router.url;\n    let listOfPath = this.router.url.split(\"/\");\n    let sliderImageId = listOfPath[listOfPath.length - 1];\n\n    this.productService.postMethod(\n      (response)=>{\n        alert(\"Product added successfully\");\n        this.eventEmitor.emit();\n      },\n      (error)=>{\n        alert(\"Something went wrong\");\n      },\n      {\"product_id\":id,\"image_add\":this.data.data[0].id},\n      \"dashboard/imageadds/add\"\n    );\n  }\n\n  onDelete(productId){\n\n    this.productService.deleteMethod(\n      (response)=>{\n        console.log(response);\n        this.eventEmitor.emit();\n      },\n      (error)=>{\n        console.log(error);\n      },\n      {\n        \"product_id\":productId,\n        \"image_add\":this.data.data[0].id\n      },\n      \"dashboard/imageadds/add\"\n    );\n  }\n\n}\n","export default \"table {\\n  width: 100%;\\n  border: 1px solid #f2f2f2; }\\n\\ntd {\\n  text-align: center;\\n  padding: 8px;\\n  border: 1px solid #f2f2f2; }\\n\\nth {\\n  text-align: center;\\n  padding: 16px;\\n  border: 1px solid #f2f2f2; }\\n\\ntr:nth-child(even) {\\n  background-color: #f2f2f2; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9iaWxlL2NvbXBvbmVudHMvcHJvZHVjdHNsaWRlci9FOlxccHJvamVjdC1vbmUtZm9yLWFsbFxcaW50ZXJtZWRpYXRlXFxhbmd1bGFyLWphbjEvc3JjXFxhcHBcXG1vYmlsZVxcY29tcG9uZW50c1xccHJvZHVjdHNsaWRlclxccHJvZHVjdHNsaWRlci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFdBQVc7RUFDWCx5QkFBeUIsRUFBQTs7QUFHN0I7RUFDSSxrQkFBa0I7RUFDbEIsWUFBWTtFQUNaLHlCQUF5QixFQUFBOztBQUc3QjtFQUNJLGtCQUFrQjtFQUNsQixhQUFhO0VBQ2IseUJBQXlCLEVBQUE7O0FBRzdCO0VBQ0kseUJBQXlCLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9tb2JpbGUvY29tcG9uZW50cy9wcm9kdWN0c2xpZGVyL3Byb2R1Y3RzbGlkZXIuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJ0YWJsZSB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNmMmYyZjI7XHJcbn1cclxuXHJcbnRkIHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIHBhZGRpbmc6IDhweDtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNmMmYyZjI7XHJcbn1cclxuXHJcbnRoIHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIHBhZGRpbmc6IDE2cHg7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZjJmMmYyO1xyXG59XHJcblxyXG50cjpudGgtY2hpbGQoZXZlbikge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YyZjJmMjtcclxufSJdfQ== */\"","import { Component, OnInit , Input ,Output , EventEmitter  } from '@angular/core';\nimport { FormGroup , FormControl , Validators,  } from '@angular/forms';\nimport { imageBaseUrl } from '../../../Models/common';\nimport {  } from '../../../Models/common';\nimport { ProductService } from '../../../services/product/product.service';\nimport {NgbModal, ModalDismissReasons} from '@ng-bootstrap/ng-bootstrap';\nimport { Router } from '@angular/router';\n\n\n@Component({\n  selector: 'ngx-productslider',\n  templateUrl: './productslider.component.html',\n  styleUrls: ['./productslider.component.scss']\n})\nexport class ProductsliderComponent implements OnInit {\n\n  @Input() data;\n  @Output() eventEmitor = new EventEmitter();\n  formGroup:FormGroup;\n  addproductGroup:FormGroup;\n  submited:boolean = false;\n  baseUrl:string = '';\n  loading = false;\n  suggestion:any = [];\n\n\n  constructor(private productService:ProductService,private router:Router) { }\n\n  ngOnInit() {\n    this.baseUrl = imageBaseUrl;\n    this.formGroup = new FormGroup({\n\n      title:new FormControl('',[Validators.required]),\n\n    });\n\n    this.addproductGroup = new FormGroup({\n      productName: new FormControl('')\n    });\n    this.addproductGroup.get('productName').valueChanges.subscribe((data)=>{\n      // console.log(data);\n      if(data.toString().length > 0){\n        this.productService.getMethod(\n          (response)=>{\n            this.suggestion = response;\n          },\n          (error)=>{},\n          {\n            \"query\":data\n          },\n          \"dashboard/search\"\n        );\n      }\n      else{\n        this.suggestion = [];\n      }\n    });\n  }\n\n  onSubmit(){\n    console.log(\">>>>\");\n    if(this.formGroup.valid){\n      this.loading = true;\n      let formData =new FormData();\n      formData.append('title',this.formGroup.get('title').value);\n      // formData.append('image',this.formGroup.get('file').value);\n      formData.append('deals_component',this.data.id);\n      this.productService.postMethod(\n        (response)=>{\n          console.log(response);\n          this.loading = false;\n          this.eventEmitor.emit();\n        },\n        (error)=>{},\n        formData,\n        \"dashboard/productslider/1\"\n      );\n\n    }\n    else{\n      alert(\"Please provide a valid details\");\n    }\n\n  }\n\n  uploadImage($event){\n    if($event.target.files.length > 0)\n    {\n\n      this.formGroup.patchValue({\n        file:$event.target.files[0]\n      });\n\n    }\n  }\n\n  onSelect(id){\n    console.log(id);\n    // let path = this.router.url;\n    let listOfPath = this.router.url.split(\"/\");\n    let sliderImageId = listOfPath[listOfPath.length - 1];\n\n    this.productService.postMethod(\n      (response)=>{\n        alert(\"Product added successfully\");\n        this.eventEmitor.emit();\n      },\n      (error)=>{\n        alert(\"Something went wrong\");\n      },\n      {\"product_id\":id,\"image_add\":this.data.data[0].id},\n      \"dashboard/addproductslider\"\n    );\n  }\n\n  onDelete(productId){\n\n    this.productService.deleteMethod(\n      (response)=>{\n        console.log(response);\n        this.eventEmitor.emit();\n      },\n      (error)=>{\n        console.log(error);\n      },\n      {\n        \"product_id\":productId,\n        \"image_add\":this.data.data[0].id\n      },\n      \"dashboard/addproductslider\"\n    );\n  }\n\n}\n","export default \".image-class {\\n  width: 100%;\\n  height: 100%;\\n  -o-object-fit: contain;\\n     object-fit: contain; }\\n\\n.image-container {\\n  background-color: red;\\n  height: 100px;\\n  width: 100%; }\\n\\n.divider {\\n  height: 0.5px;\\n  background-color: grey;\\n  width: 100%;\\n  margin: 16px;\\n  padding: 0.5px; }\\n\\ntable {\\n  width: 100%;\\n  border: 1px solid #f2f2f2; }\\n\\ntd {\\n  text-align: center;\\n  padding: 8px;\\n  border: 1px solid #f2f2f2; }\\n\\nth {\\n  text-align: center;\\n  padding: 16px;\\n  border: 1px solid #f2f2f2; }\\n\\ntr:nth-child(even) {\\n  background-color: #f2f2f2; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9iaWxlL2NvbXBvbmVudHMvc2xpZGVyYWRkcy9FOlxccHJvamVjdC1vbmUtZm9yLWFsbFxcaW50ZXJtZWRpYXRlXFxhbmd1bGFyLWphbjEvc3JjXFxhcHBcXG1vYmlsZVxcY29tcG9uZW50c1xcc2xpZGVyYWRkc1xcc2xpZGVyYWRkcy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFdBQVc7RUFDWCxZQUFZO0VBQ1osc0JBQW1CO0tBQW5CLG1CQUFtQixFQUFBOztBQUd2QjtFQUNJLHFCQUFxQjtFQUNyQixhQUFhO0VBQ2IsV0FBVyxFQUFBOztBQUdmO0VBQ0ksYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixXQUFXO0VBQ1gsWUFBWTtFQUNaLGNBQWMsRUFBQTs7QUFHbEI7RUFDSSxXQUFXO0VBQ1gseUJBQXlCLEVBQUE7O0FBRzdCO0VBQ0ksa0JBQWtCO0VBQ2xCLFlBQVk7RUFDWix5QkFBeUIsRUFBQTs7QUFHN0I7RUFDSSxrQkFBa0I7RUFDbEIsYUFBYTtFQUNiLHlCQUF5QixFQUFBOztBQUc3QjtFQUNJLHlCQUF5QixFQUFBIiwiZmlsZSI6InNyYy9hcHAvbW9iaWxlL2NvbXBvbmVudHMvc2xpZGVyYWRkcy9zbGlkZXJhZGRzLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmltYWdlLWNsYXNzIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgb2JqZWN0LWZpdDogY29udGFpbjtcclxufVxyXG5cclxuLmltYWdlLWNvbnRhaW5lciB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7XHJcbiAgICBoZWlnaHQ6IDEwMHB4O1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbn1cclxuXHJcbi5kaXZpZGVyIHtcclxuICAgIGhlaWdodDogMC41cHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBncmV5O1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBtYXJnaW46IDE2cHg7XHJcbiAgICBwYWRkaW5nOiAwLjVweDtcclxufVxyXG5cclxudGFibGUge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZjJmMmYyO1xyXG59XHJcblxyXG50ZCB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBwYWRkaW5nOiA4cHg7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZjJmMmYyO1xyXG59XHJcblxyXG50aCB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBwYWRkaW5nOiAxNnB4O1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2YyZjJmMjtcclxufVxyXG5cclxudHI6bnRoLWNoaWxkKGV2ZW4pIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7XHJcbn0iXX0= */\"","import { Component, OnInit , Input , Output , EventEmitter } from '@angular/core';\nimport { FormGroup , FormControl , Validators,  } from '@angular/forms';\nimport { imageBaseUrl } from '../../../Models/common';\nimport {  } from '../../../Models/common';\nimport { ProductService } from '../../../services/product/product.service';\nimport {NgbModal, ModalDismissReasons} from '@ng-bootstrap/ng-bootstrap';\n\n// import { EventEmitter } from 'events';\n\n@Component({\n  selector: 'ngx-slideradds',\n  templateUrl: './slideradds.component.html',\n  styleUrls: ['./slideradds.component.scss']\n})\nexport class SlideraddsComponent implements OnInit {\n\n  @Input() data;\n  @Output() eventEmitor = new EventEmitter();\n  title:string = \"\";\n  formGroup:FormGroup;\n  slideGroup:FormGroup;\n  submited:boolean = false;\n  submitedSlide:boolean = false;\n  uploading:boolean = false;\n  BASE_URL:string;\n  productList:any = [];\n  selectedSliderId:any = 0;\n  closeResults:string;\n\n  constructor(private productServices:ProductService,private modalService: NgbModal) { }\n\n  ngOnInit() {\n    this.BASE_URL = imageBaseUrl;\n    console.log(this.data);\n    if(this.data.data.length > 0){\n      this.formGroup = new FormGroup({\n        title: new FormControl(this.data.data[0].title,[Validators.required]),\n        slder: new FormControl(this.data.id,[Validators.required])\n      });\n    }\n    else{\n      this.formGroup = new FormGroup({\n        title: new FormControl('',[Validators.required]),\n        slder: new FormControl(this.data.id,[Validators.required])\n      });\n    }\n    this.slideGroup = new FormGroup({\n      title:new FormControl('',[Validators.required]),\n      file:new FormControl('',[Validators.required])\n    });\n  }\n\n  onTitleSubmit(){\n    this.uploading = true;\n    if(this.formGroup.valid){\n      this.productServices.postMethod(\n        (response)=>{\n          this.eventEmitor.emit();\n          this.uploading = false;\n          console.log(response);\n        },\n        (error)=>{\n          console.log(error);\n        },\n        {\n          \"id\":this.data.id,\n          \"title\":this.formGroup.get('title').value\n        },\n        \"dashboard/slideradds/1\"\n      );\n    }\n    else{\n      alert(\"Please enter a valid details\");\n    }\n  }\n\n  onSelectSlider(id,products){\n    console.log(\"slider Image id\",id);\n    this.selectedSliderId = id;\n    this.productList = products;\n  }\n\n  onDelete(sliderId,productId){\n    console.log(sliderId,productId);\n    this.productServices.deleteMethod(\n      (response)=>{\n        console.log(response);\n        this.eventEmitor.emit();\n      },\n      (error)=>{\n        console.log(error);\n      },\n      {\n        \"product_id\":productId\n      },\n      \"dashboard/addsliderproduct/\"+sliderId\n    );\n  }\n  uploadImage($event){\n    if($event.target.files.length > 0)\n    {\n\n      this.slideGroup.patchValue({\n        file:$event.target.files[0]\n      });\n\n    }\n  }\n\n  onSubmitSLides(){\n\n    if(this.slideGroup.valid){\n      this.submitedSlide = true;\n      let formData = new FormData();\n      console.log(this.slideGroup.get('title').value);\n      formData.append(\"title\",this.slideGroup.get('title').value);\n      formData.append(\"images\",this.slideGroup.get('file').value);\n      formData.append(\"slider\",this.data.id);\n      console.log(formData.forEach((val,key)=>{\n        console.log(val);\n      }));\n      this.productServices.postMethod(\n        (response)=>{\n          this.submitedSlide = false;\n          console.log(response);\n          this.eventEmitor.emit();\n        },\n        (error)=>{\n          this.submitedSlide = false;\n          console.log(error);\n        },\n        formData,\n        \"dashboard/slideraddsimages/\"+this.data.id\n      );\n\n\n    }\n    else{\n      this.submitedSlide = true;\n      alert(\"Please provide a valid information\");\n      this.submitedSlide = false;\n    }\n\n  }\n\n  onDeleteSlider(id,content){\n    this.open(id,content);\n  }\n\n  open(id,content) {\n    this.modalService.open(content, {ariaLabelledBy: 'modal-basic-title'}).result.then((result) => {\n      this.closeResults = `Closed with: ${result}`;\n      console.log(result);\n      if(result == 'sure'){\n        this.productServices.deleteMethod(\n          (response)=>{\n            console.log(\"deleted\");\n            this.eventEmitor.emit();\n          },\n          (error)=>{},\n          {},\n          \"dashboard/slideraddsimages/\"+id\n        );\n      }\n    }, (reason) => {\n      this.closeResults = `Dismissed ${this.getDismissReason(reason)}`;\n      console.log(reason);\n\n    });\n  }\n\n  private getDismissReason(reason: any): string {\n    if (reason === ModalDismissReasons.ESC) {\n      return 'by pressing ESC';\n    } else if (reason === ModalDismissReasons.BACKDROP_CLICK) {\n      return 'by clicking on a backdrop';\n    } else {\n      return  `with: ${reason}`;\n    }\n  }\n\n}\n","export default \"table {\\n  width: 100%;\\n  border: 1px solid #f2f2f2; }\\n\\ntd {\\n  text-align: center;\\n  padding: 8px;\\n  border: 1px solid #f2f2f2; }\\n\\nth {\\n  text-align: center;\\n  padding: 16px;\\n  border: 1px solid #f2f2f2; }\\n\\ntr:nth-child(even) {\\n  background-color: #f2f2f2; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9iaWxlL2Rhc2hib2FyZC9FOlxccHJvamVjdC1vbmUtZm9yLWFsbFxcaW50ZXJtZWRpYXRlXFxhbmd1bGFyLWphbjEvc3JjXFxhcHBcXG1vYmlsZVxcZGFzaGJvYXJkXFxkYXNoYm9hcmQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxXQUFXO0VBQ1gseUJBQXlCLEVBQUE7O0FBRzdCO0VBQ0ksa0JBQWtCO0VBQ2xCLFlBQVk7RUFDWix5QkFBeUIsRUFBQTs7QUFHN0I7RUFDSSxrQkFBa0I7RUFDbEIsYUFBYTtFQUNiLHlCQUF5QixFQUFBOztBQUc3QjtFQUNJLHlCQUF5QixFQUFBIiwiZmlsZSI6InNyYy9hcHAvbW9iaWxlL2Rhc2hib2FyZC9kYXNoYm9hcmQuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJ0YWJsZSB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNmMmYyZjI7XHJcbn1cclxuXHJcbnRkIHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIHBhZGRpbmc6IDhweDtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNmMmYyZjI7XHJcbn1cclxuXHJcbnRoIHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIHBhZGRpbmc6IDE2cHg7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZjJmMmYyO1xyXG59XHJcblxyXG50cjpudGgtY2hpbGQoZXZlbikge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YyZjJmMjtcclxufSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { ProductService } from '../../services/product/product.service';\n\n@Component({\n  selector: 'ngx-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n\n  screenComponent:any = [];\n\n  constructor(private productService:ProductService) {\n\n  }\n\n  ngOnInit() {\n    this.productService.getMethod(\n      (response)=>{\n        this.screenComponent = response;\n      },\n      (error)=>{\n        alert(\"Something went wrong please refresh\");\n      },\n      {},\n      \"dashboard/component\"\n      );\n  }\n\n}\n","export default \".mobilescreen {\\n  border: 1px solid #333;\\n  height: 500px;\\n  width: 50%;\\n  overflow: scroll;\\n  display: block;\\n  background-color: whitesmoke; }\\n\\n.appBar {\\n  background-color: green;\\n  height: 50px;\\n  width: 100%;\\n  display: block; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9iaWxlL2VkaXRzY3JlZW4vRTpcXHByb2plY3Qtb25lLWZvci1hbGxcXGludGVybWVkaWF0ZVxcYW5ndWxhci1qYW4xL3NyY1xcYXBwXFxtb2JpbGVcXGVkaXRzY3JlZW5cXGVkaXRzY3JlZW4uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxzQkFBc0I7RUFDdEIsYUFBYTtFQUNiLFVBQVU7RUFDVixnQkFBZ0I7RUFDaEIsY0FBYztFQUNkLDRCQUE0QixFQUFBOztBQUdoQztFQUNJLHVCQUF1QjtFQUN2QixZQUFZO0VBQ1osV0FBVztFQUNYLGNBQWMsRUFBQSIsImZpbGUiOiJzcmMvYXBwL21vYmlsZS9lZGl0c2NyZWVuL2VkaXRzY3JlZW4uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubW9iaWxlc2NyZWVuIHtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICMzMzM7XHJcbiAgICBoZWlnaHQ6IDUwMHB4O1xyXG4gICAgd2lkdGg6IDUwJTtcclxuICAgIG92ZXJmbG93OiBzY3JvbGw7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlc21va2U7XHJcbn1cclxuXHJcbi5hcHBCYXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47XHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG59XHJcblxyXG4vLyAuc2xpZGVyLWNvbnRlbnQge1xyXG4vLyAgICAgLy8gZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4vLyAgICAgcGFkZGluZy10b3A6IDQ1cHg7XHJcbi8vICAgICBwYWRkaW5nLWxlZnQ6IDUwJTtcclxuLy8gfSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-editscreen',\n  templateUrl: './editscreen.component.html',\n  styleUrls: ['./editscreen.component.scss']\n})\nexport class EditscreenComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export default \".showimage {\\n  margin: 8px;\\n  height: 100px;\\n  width: 100%;\\n  background-color: white;\\n  border: 1px solid gray; }\\n  .showimage .showimage-background {\\n    width: 100%;\\n    height: 100px;\\n    display: inline-block;\\n    background-color: white;\\n    background: linear-gradient(to top left, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0) calc(50% - 0.8px), black 50%, rgba(0, 0, 0, 0) calc(50% + 0.8px), rgba(0, 0, 0, 0) 100%), linear-gradient(to top right, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0) calc(50% - 0.8px), black 50%, rgba(0, 0, 0, 0) calc(50% + 0.8px), rgba(0, 0, 0, 0) 100%); }\\n  .showimage .showimage-background .showimage-content {\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      height: 100px;\\n      font-weight: bold;\\n      color: gray;\\n      font-size: 18px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9iaWxlL2xheW91dC9pbWFnZXNpbmdsZS9FOlxccHJvamVjdC1vbmUtZm9yLWFsbFxcaW50ZXJtZWRpYXRlXFxhbmd1bGFyLWphbjEvc3JjXFxhcHBcXG1vYmlsZVxcbGF5b3V0XFxpbWFnZXNpbmdsZVxcaW1hZ2VzaW5nbGUuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxXQUFXO0VBQ1gsYUFBYTtFQUNiLFdBQVc7RUFDWCx1QkFBdUI7RUFDdkIsc0JBQXNCLEVBQUE7RUFMMUI7SUFRUSxXQUFXO0lBQ1gsYUFBYTtJQUNiLHFCQUFxQjtJQUNyQix1QkFBdUI7SUFDdkIscVVBQTJWLEVBQUE7RUFablc7TUFlWSxhQUFhO01BRWIsbUJBQW1CO01BRW5CLHVCQUF1QjtNQUN2QixhQUFhO01BQ2IsaUJBQWlCO01BQ2pCLFdBQVc7TUFDWCxlQUFlLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9tb2JpbGUvbGF5b3V0L2ltYWdlc2luZ2xlL2ltYWdlc2luZ2xlLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnNob3dpbWFnZSB7XHJcbiAgICBtYXJnaW46IDhweDtcclxuICAgIGhlaWdodDogMTAwcHg7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgZ3JheTtcclxuICAgIC5zaG93aW1hZ2UtYmFja2dyb3VuZCB7XHJcbiAgICAgICAgLy8gbWFyZ2luOiAwIGF1dG87XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgaGVpZ2h0OiAxMDBweDtcclxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbiAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRvIHRvcCBsZWZ0LCByZ2JhKDAsIDAsIDAsIDApIDAlLCByZ2JhKDAsIDAsIDAsIDApIGNhbGMoNTAlIC0gMC44cHgpLCByZ2JhKDAsIDAsIDAsIDEpIDUwJSwgcmdiYSgwLCAwLCAwLCAwKSBjYWxjKDUwJSArIDAuOHB4KSwgcmdiYSgwLCAwLCAwLCAwKSAxMDAlKSwgbGluZWFyLWdyYWRpZW50KHRvIHRvcCByaWdodCwgcmdiYSgwLCAwLCAwLCAwKSAwJSwgcmdiYSgwLCAwLCAwLCAwKSBjYWxjKDUwJSAtIDAuOHB4KSwgcmdiYSgwLCAwLCAwLCAxKSA1MCUsIHJnYmEoMCwgMCwgMCwgMCkgY2FsYyg1MCUgKyAwLjhweCksIHJnYmEoMCwgMCwgMCwgMCkgMTAwJSk7XHJcbiAgICAgICAgLnNob3dpbWFnZS1jb250ZW50IHtcclxuICAgICAgICAgICAgLy8gZGlzcGxheTogLXdlYmtpdC1mbGV4O1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICAvLyAtd2Via2l0LWFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgICAgIC8vIC13ZWJraXQtanVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgICAgICAgICBoZWlnaHQ6IDEwMHB4O1xyXG4gICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgICAgICAgICAgY29sb3I6IGdyYXk7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-imagesingle',\n  templateUrl: './imagesingle.component.html',\n  styleUrls: ['./imagesingle.component.scss']\n})\nexport class ImagesingleComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export default \".productList {\\n  margin: 8px;\\n  height: 200px;\\n  width: 100%;\\n  background-color: white;\\n  border: 1px solid gray; }\\n  .productList .title {\\n    border: 1px solid gray;\\n    height: 50px;\\n    padding: 16px;\\n    font-weight: bold;\\n    color: gray;\\n    font-size: 18px; }\\n  .productList .productList-image {\\n    width: 100%;\\n    height: 150px;\\n    display: inline-block;\\n    background-color: white;\\n    background: linear-gradient(to top left, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0) calc(50% - 0.8px), black 50%, rgba(0, 0, 0, 0) calc(50% + 0.8px), rgba(0, 0, 0, 0) 100%), linear-gradient(to top right, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0) calc(50% - 0.8px), black 50%, rgba(0, 0, 0, 0) calc(50% + 0.8px), rgba(0, 0, 0, 0) 100%); }\\n  .productList .productList-image .productList-content {\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      height: 150px;\\n      font-weight: bold;\\n      color: gray;\\n      font-size: 18px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9iaWxlL2xheW91dC9wcm9kdWN0d2l0aHRpdGxlL0U6XFxwcm9qZWN0LW9uZS1mb3ItYWxsXFxpbnRlcm1lZGlhdGVcXGFuZ3VsYXItamFuMS9zcmNcXGFwcFxcbW9iaWxlXFxsYXlvdXRcXHByb2R1Y3R3aXRodGl0bGVcXHByb2R1Y3R3aXRodGl0bGUuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxXQUFXO0VBQ1gsYUFBYTtFQUNiLFdBQVc7RUFDWCx1QkFBdUI7RUFDdkIsc0JBQXNCLEVBQUE7RUFMMUI7SUFPUSxzQkFBc0I7SUFDdEIsWUFBWTtJQUNaLGFBQWE7SUFDYixpQkFBaUI7SUFDakIsV0FBVztJQUNYLGVBQWUsRUFBQTtFQVp2QjtJQWdCUSxXQUFXO0lBQ1gsYUFBYTtJQUNiLHFCQUFxQjtJQUNyQix1QkFBdUI7SUFDdkIscVVBQTJWLEVBQUE7RUFwQm5XO01BdUJZLGFBQWE7TUFFYixtQkFBbUI7TUFFbkIsdUJBQXVCO01BQ3ZCLGFBQWE7TUFDYixpQkFBaUI7TUFDakIsV0FBVztNQUNYLGVBQWUsRUFBQSIsImZpbGUiOiJzcmMvYXBwL21vYmlsZS9sYXlvdXQvcHJvZHVjdHdpdGh0aXRsZS9wcm9kdWN0d2l0aHRpdGxlLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnByb2R1Y3RMaXN0IHtcclxuICAgIG1hcmdpbjogOHB4O1xyXG4gICAgaGVpZ2h0OiAyMDBweDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCBncmF5O1xyXG4gICAgLnRpdGxlIHtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBncmF5O1xyXG4gICAgICAgIGhlaWdodDogNTBweDtcclxuICAgICAgICBwYWRkaW5nOiAxNnB4O1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgICAgIGNvbG9yOiBncmF5O1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMThweDtcclxuICAgIH1cclxuICAgIC5wcm9kdWN0TGlzdC1pbWFnZSB7XHJcbiAgICAgICAgLy8gbWFyZ2luOiAwIGF1dG87XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgaGVpZ2h0OiAxNTBweDtcclxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbiAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRvIHRvcCBsZWZ0LCByZ2JhKDAsIDAsIDAsIDApIDAlLCByZ2JhKDAsIDAsIDAsIDApIGNhbGMoNTAlIC0gMC44cHgpLCByZ2JhKDAsIDAsIDAsIDEpIDUwJSwgcmdiYSgwLCAwLCAwLCAwKSBjYWxjKDUwJSArIDAuOHB4KSwgcmdiYSgwLCAwLCAwLCAwKSAxMDAlKSwgbGluZWFyLWdyYWRpZW50KHRvIHRvcCByaWdodCwgcmdiYSgwLCAwLCAwLCAwKSAwJSwgcmdiYSgwLCAwLCAwLCAwKSBjYWxjKDUwJSAtIDAuOHB4KSwgcmdiYSgwLCAwLCAwLCAxKSA1MCUsIHJnYmEoMCwgMCwgMCwgMCkgY2FsYyg1MCUgKyAwLjhweCksIHJnYmEoMCwgMCwgMCwgMCkgMTAwJSk7XHJcbiAgICAgICAgLnByb2R1Y3RMaXN0LWNvbnRlbnQge1xyXG4gICAgICAgICAgICAvLyBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgIC8vIC13ZWJraXQtYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICAgICAgLy8gLXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgICAgIGhlaWdodDogMTUwcHg7XHJcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgICAgICAgICBjb2xvcjogZ3JheTtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAxOHB4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-productwithtitle',\n  templateUrl: './productwithtitle.component.html',\n  styleUrls: ['./productwithtitle.component.scss']\n})\nexport class ProductwithtitleComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export default \".slider {\\n  margin: 8px;\\n  height: 100px;\\n  width: 100%;\\n  background-color: white;\\n  border: 1px solid gray; }\\n  .slider .slider-image {\\n    width: 100%;\\n    height: 100px;\\n    display: inline-block;\\n    background-color: white;\\n    background: linear-gradient(to top left, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0) calc(50% - 0.8px), black 50%, rgba(0, 0, 0, 0) calc(50% + 0.8px), rgba(0, 0, 0, 0) 100%), linear-gradient(to top right, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0) calc(50% - 0.8px), black 50%, rgba(0, 0, 0, 0) calc(50% + 0.8px), rgba(0, 0, 0, 0) 100%); }\\n  .slider .slider-image .slider-content {\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      height: 100px;\\n      font-weight: bold;\\n      color: gray;\\n      font-size: 18px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9iaWxlL2xheW91dC9zbGlkZXIvRTpcXHByb2plY3Qtb25lLWZvci1hbGxcXGludGVybWVkaWF0ZVxcYW5ndWxhci1qYW4xL3NyY1xcYXBwXFxtb2JpbGVcXGxheW91dFxcc2xpZGVyXFxzbGlkZXIuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxXQUFXO0VBQ1gsYUFBYTtFQUNiLFdBQVc7RUFDWCx1QkFBdUI7RUFDdkIsc0JBQXNCLEVBQUE7RUFMMUI7SUFRUSxXQUFXO0lBQ1gsYUFBYTtJQUNiLHFCQUFxQjtJQUNyQix1QkFBdUI7SUFDdkIscVVBQTJWLEVBQUE7RUFablc7TUFlWSxhQUFhO01BRWIsbUJBQW1CO01BRW5CLHVCQUF1QjtNQUN2QixhQUFhO01BQ2IsaUJBQWlCO01BQ2pCLFdBQVc7TUFDWCxlQUFlLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9tb2JpbGUvbGF5b3V0L3NsaWRlci9zbGlkZXIuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuc2xpZGVyIHtcclxuICAgIG1hcmdpbjogOHB4O1xyXG4gICAgaGVpZ2h0OiAxMDBweDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCBncmF5O1xyXG4gICAgLnNsaWRlci1pbWFnZSB7XHJcbiAgICAgICAgLy8gbWFyZ2luOiAwIGF1dG87XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgaGVpZ2h0OiAxMDBweDtcclxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbiAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRvIHRvcCBsZWZ0LCByZ2JhKDAsIDAsIDAsIDApIDAlLCByZ2JhKDAsIDAsIDAsIDApIGNhbGMoNTAlIC0gMC44cHgpLCByZ2JhKDAsIDAsIDAsIDEpIDUwJSwgcmdiYSgwLCAwLCAwLCAwKSBjYWxjKDUwJSArIDAuOHB4KSwgcmdiYSgwLCAwLCAwLCAwKSAxMDAlKSwgbGluZWFyLWdyYWRpZW50KHRvIHRvcCByaWdodCwgcmdiYSgwLCAwLCAwLCAwKSAwJSwgcmdiYSgwLCAwLCAwLCAwKSBjYWxjKDUwJSAtIDAuOHB4KSwgcmdiYSgwLCAwLCAwLCAxKSA1MCUsIHJnYmEoMCwgMCwgMCwgMCkgY2FsYyg1MCUgKyAwLjhweCksIHJnYmEoMCwgMCwgMCwgMCkgMTAwJSk7XHJcbiAgICAgICAgLnNsaWRlci1jb250ZW50IHtcclxuICAgICAgICAgICAgLy8gZGlzcGxheTogLXdlYmtpdC1mbGV4O1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICAvLyAtd2Via2l0LWFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgICAgIC8vIC13ZWJraXQtanVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgICAgICAgICBoZWlnaHQ6IDEwMHB4O1xyXG4gICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgICAgICAgICAgY29sb3I6IGdyYXk7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-slider',\n  templateUrl: './slider.component.html',\n  styleUrls: ['./slider.component.scss']\n})\nexport class SliderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vYmlsZS9sYXlvdXQvdG9wcHJvZHVjdHMvdG9wcHJvZHVjdHMuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-topproducts',\n  templateUrl: './topproducts.component.html',\n  styleUrls: ['./topproducts.component.scss']\n})\nexport class TopproductsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { EditscreenComponent } from './editscreen/editscreen.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { AdddashboardcomponentComponent } from './adddashboardcomponent/adddashboardcomponent.component';\nimport { ComponentdetailsComponent } from './componentdetails/componentdetails.component';\nimport { AddproductComponent } from './components/addproduct/addproduct.component';\n\nconst routes: Routes = [\n  {\n    path:'',\n    component:DashboardComponent\n  },\n  {\n    path:'edit',\n    component:EditscreenComponent\n  },\n  {\n    path:'addcomponent',\n    component:AdddashboardcomponentComponent\n  },\n  {\n    path:'details/:id',\n    component:ComponentdetailsComponent\n  },\n  {\n    path:'addproduct/:type/:id',\n    component: AddproductComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class MobileRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MobileRoutingModule } from './mobile-routing.module';\nimport { EditscreenComponent } from './editscreen/editscreen.component';\nimport { SliderComponent } from './layout/slider/slider.component';\nimport { ProductwithtitleComponent } from './layout/productwithtitle/productwithtitle.component';\nimport { TopproductsComponent } from './layout/topproducts/topproducts.component';\nimport { ImagesingleComponent } from './layout/imagesingle/imagesingle.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport {\n  NbActionsModule,\n  NbButtonModule,\n\n  NbTabsetModule,\n  NbUserModule,\n  NbRadioModule,\n  NbSelectModule,\n  NbListModule,\n\n  NbCheckboxModule,\n  NbDatepickerModule,\n\n} from '@nebular/theme';\n// import {\n//   NbActionsModule,\n//   NbButtonModule,\n//   NbCardModule,\n//   NbTabsetModule,\n//   NbUserModule,\n//   NbRadioModule,\n//   NbSelectModule,\n//   NbListModule,\n//   NbIconModule,\n//   NbCheckboxModule,\n//   NbDatepickerModule,\n//   NbInputModule,\n// } from '@nebular/theme';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { NbCardModule, NbIconModule, NbInputModule, NbTreeGridModule } from '@nebular/theme';\nimport { AdddashboardcomponentComponent } from './adddashboardcomponent/adddashboardcomponent.component';\nimport { ComponentdetailsComponent } from './componentdetails/componentdetails.component';\nimport { SlideraddsComponent } from './components/slideradds/slideradds.component';\nimport { ImageaddComponent } from './components/imageadd/imageadd.component';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatInputModule} from '@angular/material/input';\nimport { AddproductComponent } from './components/addproduct/addproduct.component';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport { NgbModule  } from '@ng-bootstrap/ng-bootstrap';\nimport { ProductsliderComponent } from './components/productslider/productslider.component';\n\n@NgModule({\n  declarations: [EditscreenComponent, SliderComponent, ProductwithtitleComponent,\n    TopproductsComponent, ImagesingleComponent, DashboardComponent,\n    AdddashboardcomponentComponent, ComponentdetailsComponent,\n    SlideraddsComponent, ImageaddComponent, AddproductComponent, ProductsliderComponent],\n  imports: [\n    CommonModule,\n    MobileRoutingModule,NbCardModule, NbIconModule, NbInputModule, NbTreeGridModule,\n    NbActionsModule,\n    NbButtonModule,\n    ReactiveFormsModule,\n    NbTabsetModule,\n    NbUserModule,\n    NbRadioModule,\n    NbSelectModule,\n    NbListModule,\n\n    NbCheckboxModule,\n    NbDatepickerModule,\n    MatAutocompleteModule,\n    MatInputModule,\n    MatFormFieldModule,\n    NgbModule\n  ],\n  exports: [SlideraddsComponent],\n  bootstrap: [SlideraddsComponent]\n})\nexport class MobileModule { }\n"],"sourceRoot":"webpack:///"}